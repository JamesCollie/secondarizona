'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library InOutNaNo 

(Ei Root version!)

	Created Jan 10, 2013 by James Collie/Office/HealthSpace
	Description: This script holds the code for the Buttons on the Violation Section folder
	Drat, can't maintain a common version in HS Root Elements
		There are two forms in FHA EHS that appear to be using the Violations script library, everything else uses Violations - Corrections
		The InOut stuff needs to call the function AddSection which is in Violations for EiRoot, but in Violations-Corrections in FHA.
		EiRoot uses some BuildDisplayField functions that are undefined in FHA
		Since there isnt a particularly clean way of handling this, the EI Root version is broken off. 
		If 
			a) the two forms are 'fixed', 
			b) parameters to AddViolationDialogSection() can be matched
			c) Variations in BuildDisplayField are merged
		 then Violations-Corrections can be renamed back to just Violations, and InOutNaNo can be re-joined.
%END REM
Option Public
Option Declare


'Use "Violations - Corrections"   '	<-- this is the first line that is special For FHA 
Use "Violations"   '	BuildDisplayField,BuildDisplayFieldSection,AddViolationDialogSection,AddSection,
Use "Special8.5" 'HSRefreshView
Use "General" 'HSGetProfileDocument


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub Initialize
Declare Sub Terminate
Declare Private Sub debug( msg As String, title As String, action As Integer )
Declare Private Function HSTryOwl( db As NotesDatabase, ehs As String ) As Boolean
Declare Public Sub InOutButtonClick( WhichButton As Integer )
Declare Private Function BlockButton(checkdoc As NotesDocument, Button As Integer) As Boolean

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private InOutWS As NotesUIWorkspace 
Private InOutUIinspdoc As NotesUIDocument

'some stuff to make the button names a bit abstract, also means you cant use invalid values on accident
Public Const ViolButton_In = 0
Public Const ViolButton_Out = 1
Public Const ViolButton_NA = 2
Public Const ViolButton_NO = 3
Private Const InOutLastButton = ViolButton_NO
Private InOutButtonNames (InOutLastButton) As String

Private Const DebugAction_Print = 0
Private Const DebugAction_Msg = 1

'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	
	InOutButtonNames (ViolButton_In) = "In"
	InOutButtonNames (ViolButton_Out) = "Out"
	InOutButtonNames (ViolButton_NO) = "N/O"
	InOutButtonNames (ViolButton_NA) = "N/A"
	
	Set InOutWS = New NotesUIWorkspace 
	Set InOutUIinspdoc = InOutWS.Currentdocument
	
	debug "done Init for Script : InOutNoNa", "enabled by $DebugInOut=1", DebugAction_Msg
	
End Sub

'++LotusScript Development Environment:2:2:Terminate:1:10
Sub Terminate
	debug "done Terminate", "Script : InOutNoNa", DebugAction_Msg
End Sub

'++LotusScript Development Environment:2:2:debug:1:8
Private Sub debug( msg As String, title As String, action As Integer )
	
	Dim session As New notessession
	If session.Getenvironmentstring( "DebugInOut" ) = "1" Then 
		If action = DebugAction_Msg Then
			Msgbox msg, 64, title
		Else' default If action = DebugAction_Print Then
			Print msg & " IN " & title
		End If
	End If
	
End Sub

'++LotusScript Development Environment:2:1:HSTryOwl:5:8
%REM
	Function HSTryOwl
	Description: says false if you are not HS people, otherwise says true if it can find the db on owl
%END REM
Private Function HSTryOwl( db As NotesDatabase, ehs As String ) As Boolean
	Dim session As New notessession
	HSTryOwl  = False 
	If Right$( session.username, 24 ) = "/OU=Office/O=HealthSpace" Then
		HSTryOwl = db.OpenByReplicaID("Owl", ehs)
	End If	
End Function

'++LotusScript Development Environment:2:2:InOutButtonClick:1:8
Public Sub InOutButtonClick( WhichButton As Integer )

	%REM
	Function InOutButtonClick
	Description: Call this passing in the ViolButton_xx constant that describes which button was clicked
	%END REM

	If WhichButton > InOutLastButton Then
		Msgbox "Undefined button referenced in InOutButtonClick()", 32, "Programming error"
		Exit Sub
	End If
	
	Dim Session As New NotesSession
	debug "starting InOutButtonClick() " & Format( Now, "hh:mm" ), "Script : InOutNaNo", DebugAction_Msg
	Dim HealthSpace As New NotesDatabase( "", "" )
	Dim ehsid As String
	Dim InspView As NotesView
	Dim ViolationsDB As NotesDatabase
	Dim SectionView As NotesUIView
	Dim collection As NotesDocumentCollection
	Dim checkdoc As NotesDocument
	Dim inspdoc As NotesDocument
	Dim continueBlockButton As Boolean
	Dim Msettings As NotesDocument
	Dim FolderName As String
	
	On Error Goto wtf
	
	Set SectionView = InOutWS.CurrentView 'grabbed here, but not used until refreshing at the end
	debug "SectionView is " & SectionView.Viewname, "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
	If InOutUIinspdoc.EditMode = False Then
		InOutUIinspdoc.EditMode = True
		If InOutUIinspdoc.EditMode = False Then
			'if = True fails, we have to get out of here!
			Exit Sub
		End If
	End If
	Set inspdoc = InOutUIinspdoc.Document
	If inspdoc.IsNewNote Then
		InOutUIinspdoc.AutoReload = False 'I wonder if this is really important?
	Else
		debug "inspection.isnewnote is False, Reload is " & InOutUIinspdoc.AutoReload, "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
	End If
	
	ehsid = Left( inspdoc.EHSID(0), 8 ) & Right( inspdoc.EHSID(0), 8 )
	
	If HealthSpace.OpenByReplicaID("",ehsid) = False Then 'local first, always
		If HealthSpace.OpenByReplicaID( inspdoc.ParentDatabase.Server, ehsid) = False Then 'same server as inspdoc
			If HealthSpace.OpenByReplicaID("Mole",ehsid) = False Then 'getting desparate!
				If Not HSTryOwl( HealthSpace, ehsid ) Then
					Msgbox "Unable to open EHS database!", 48, "Program error"
					Exit Sub
				End If
			End If
		End If
	End If
	If WhichButton = ViolButton_Out Then
		Set InspView = HealthSpace.GetView("InspectionsParents")
		If InspView Is Nothing Then
			Msgbox "Unable to open the inspection search view. This form will be unable to function correctly", 48, "Program error"
		End If
	End If
	FolderName = "Violation Section"
	Set msettings = HSGetProfileDocument( HealthSpace, "MasterSettings" )
	If Not msettings Is Nothing Then
		If msettings.Use2013ViolCode(0) = "Yes" Then
			FolderName = "Violation Section2" & "\" & inspdoc.DocumentID(0) & "-" & session.Commonusername 
		End If
	End If
	If FolderName <> SectionView.Viewname Then
		Msgbox "Inappropriate folder access. " & SectionView.Viewname & " should be " & Foldername
	End If			
	
	Set ViolationsDB = session.CurrentDatabase
	Set collection = ViolationsDB.UnprocessedDocuments
	debug "collection has " & collection.Count, "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
	Set checkdoc = collection.GetFirstDocument
	'fha has (had, now commented out!) .deselect way up here!?
	continueBlockButton = False
	debug "Finished setup for InOutButtonClick()", "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
	Do Until checkdoc Is Nothing
		debug "starting a loop for " & InOutButtonNames(WhichButton), "Script : InOutNaNo, InOutButtonClick()", DebugAction_Print
		If BlockButton(checkdoc, WhichButton) Then
			Messagebox InOutButtonNames(WhichButton)& " button can not be used with check list #" & checkdoc.SectionNumber(0), 0+64, "Blocked Button"
		Else
			If WhichButton = ViolButton_Out Then 'out has different functions and updates different fields
				inspdoc.ViolationSection = checkdoc.SectionNumber(0)
				inspdoc.ViolationSectionDescription = checkdoc.Description(0)
				inspdoc.ViolationHazardRating = checkdoc.HazardRating(0)
				If Not AddViolationDialogSection( ViolationsDB, HealthSpace, InOutUIinspdoc, InspView ) Then	'	<--- second FHA difference, checkdoc not used in EiRoot
					If checkdoc.Reuse(0) <> "Yes" Then
						Call checkdoc.RemoveFromFolder( FolderName ) 'not needed Now? repopulatefolder takes care of it? Nope
					End If
				End If
			Else 'in, no and na all do almost the same thing
				Call AddSection(checkdoc,inspdoc,InOutButtonNames(WhichButton))
				Call checkdoc.RemoveFromFolder( FolderName ) 'not needed now? rats
			End If
			continueBlockButton = True
		End If
		Set checkdoc = collection.GetNextDocument(checkdoc)
		debug "finished a loop for " & InOutButtonNames(WhichButton), "Script : InOutNaNo, InOutButtonClick()", DebugAction_Print
	Loop
	
	If inspdoc.IsNewNote Then
		InOutUIinspdoc.AutoReload = True
	End If
	
	If continueBlockButton Then
		If WhichButton = ViolButton_Out Then 
			'Call BuildDisplayField( inspdoc ) 'FHA version uses this
			If inspdoc.Form(0) = "HotelReport" Or inspdoc.Form(0) = "HousingReport" Or inspdoc.Form(0) = "RadiationReport" Then
				Call BuildDisplayFieldHotel( inspdoc, "MARKED" )
			Elseif inspdoc.Form(0) = "PoolReport" And inspdoc.ViolationSubModule(0) = "Waterslide" Then
				Call BuildDisplayFieldWaterslide( inspdoc, "MARKED" )
			Else
				Call BuildDisplayFieldVDH( inspdoc, "MARKED" )
			End If
		Else
			Call BuildDisplayFieldSection( inspdoc )
		End If
		If Not SectionView Is Nothing Then 
			debug "trying SectionView.DeselectAll", "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
			On Error 4409 Goto whineaboutit
			Call SectionView.DeselectAll
			On Error 4409 Goto 0
			Goto thatsenough
whineAboutIt:
			debug "skipped error in SectionView.DeselectAll", "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
thatsenough:
			debug "trying HSRefreshView", "Script : InOutNaNo, InOutButtonClick()", DebugAction_Print
			HSRefreshView InOutWS, SectionView, violationsDB.ReplicaID 
		Else
			debug "SectionView Is Nothing!", "Script : InOutNaNo, InOutButtonClick()", DebugAction_Msg
		End If
	End If
	
ciao:
	debug "leaving InOutButtonClick()", "Script : InOutNaNo", DebugAction_Msg
	Exit Sub
	
wtf:
	Msgbox "Error in InOutButtonClick( & InOutButtonNames(WhichButton) & ), at line" & Erl & " (" & Error & ") & [msettings='" & msettings.Use2013ViolCode(0) & "']"
	Resume ciao
	
End Sub

'++LotusScript Development Environment:2:1:BlockButton:1:8
Private Function BlockButton(checkdoc As NotesDocument, Button As Integer) As Boolean
	Dim bitem As NotesItem
	Set bitem = checkdoc.GetFirstItem("Button")
	If bitem Is Nothing Then
		BlockButton = False
	Else
		BlockButton = bitem.Contains(InOutButtonNames(Button))
	End If
End Function