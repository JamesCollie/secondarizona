'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

Use "Dates"
Use "Databases"
'Use "General"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub Initialize
Declare Function RemovePayment( db As NotesDatabase, doc As NotesDocument, sPayment As String ) As String	
Declare Function ApplyOverpayment(ws As NotesUIWorkspace, db As NotesDatabase, doc As NotesDocument, lastapp As NotesDocument, paydoc As NotesDocument) As Integer
Declare Function GetMostRecentRenewal( appdoc As NotesDocument, IncludeApp As Boolean ) As NotesDocument
Declare Function UpdateManager( renewdoc As NotesDocument ) As Boolean
Declare Sub CreateRandomFee( Facility As NotesDocument )
Declare Function CalculateTotalPayment( vPayment As Variant ) As Currency
Declare Function CalculateExpiryDateNotUsed( doc As NotesDocument, length As Integer ) As NotesDateTime
Declare Function RemoveOverPayment( db As NotesDatabase, doc As NotesDocument, sPayment As String ) As String	
Declare Sub CalculateEffectiveDate( appdoc As NotesDocument, lastapp As NotesDocument, vPayDate As Variant )
Declare Function PostOverpayment( doc As NotesDocument, cOver As Currency ) As String
Declare Function CheckExistingCert( doc As NotesDocument ) As Boolean
Declare Function CheckExistingManager( Source As NotesUIDocument, sField As String ) As Boolean
Declare Sub CreateCertificate( doc As NotesDocument, db As NotesDatabase )
Declare Function CheckActiveCerts( mandoc As NotesDocument ) As Boolean
Declare Function CalculateExpirationDate( doc As NotesDocument ) As String
Declare Function SetTDHLockboxID( mandoc As NotesDocument, appdoc As NotesDocument ) As Boolean
Declare Function PostPayment( renewdoc As NotesDocument, inputdoc As NotesDocument, db As NotesDatabase ) As String	
Declare Function AppendFee( doc As NotesDocument, indoc As NotesDocument, Byval vEnd As Variant ) As String
Declare Function CheckCertTypes( mandoc As NotesDocument ) As Boolean	
Declare Function SetRenewalFields( newdoc As NotesDocument, opdoc As NotesDocument, globdoc As NotesDocument, sType As String, session As NotesSession ) As String
Declare Function IsMgrInactive( m As NotesDocument ) As Boolean
Declare Sub SetAmount

'++LotusScript Development Environment:2:5:(Declarations):0:10
Dim sDesign As String
Dim cAmount() As Currency		
Dim sBy() As String
Dim sID() As String
Dim sType() As String
Dim dtime() As NotesDateTime
Dim sDetail() As String
Dim vAmount As Variant	
Dim vBy As Variant
Dim vID As Variant
Dim vDate As Variant
Dim vType As Variant
Dim vDetail As Variant	
Dim iStart As Integer, iEnd As Integer
Dim sAmount As String, cPayAmount As Currency
Dim sFeePay As String
Dim sFirst As String, sLast As String
Dim x As Integer, y As Integer, dx As Integer

'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	sDesign = DBDesign
End Sub

'++LotusScript Development Environment:2:1:RemovePayment:1:8
Function RemovePayment( db As NotesDatabase, doc As NotesDocument, sPayment As String ) As String	
	
	Dim cAmount() As Currency		
	Dim sBy() As String
	Dim sID() As String
	Dim sType() As String
	Dim dtime() As NotesDateTime
	Dim sDetail() As String
	
	Dim vAmount As Variant	
	Dim vBy As Variant
	Dim vID As Variant
	Dim vDate As Variant
	Dim vType As Variant
	Dim vDetail As Variant	
	
	Dim iStart As Integer, iEnd As Integer
	Dim sAmount As String, cPayAmount As Currency
	Dim sFeePay As String
	Dim sFirst As String, sLast As String
	Dim x As Integer, y As Integer, dx As Integer
	
	Dim bRemoveOver As Boolean
	
	
	bRemoveOver = False
	RemovePayment = ""
	
	On Error Goto ErrorHandler
	
	'doc multi value payment fields
	vAmount = doc.PaymentAmount 			
	vBy = doc.PaymentBy
	vID = doc.PaymentID
	vDate = doc.PaymentDate
	vType = doc.PaymentType
	vDetail = doc.PaymentDetail
	
	x = 0
	Redim cAmount(x) As Currency		
	Redim sBy(x) As String
	Redim sID(x) As String
	Redim sType(x) As String
	Redim dtime(x) As NotesDateTime
	Redim sDetail(x) As String
	
	For y = 0 To Ubound( vID )
		If vID(y) <> sPayment Then
			'rebuild payments without selected
			Redim Preserve cAmount(x) As Currency	
			Redim Preserve sID(x) As String
			Redim Preserve sBy(x) As String
			Redim Preserve sType(x) As String
			Redim Preserve sDetail(x) As String
			Redim Preserve dtime(x) As NotesDateTime
			Redim Preserve sDate(x) As String
			
			cAmount(x) = vAmount(y)
			sBy(x) = vBy(y)
			sID(x) = vID(y)
			sType(x) = vType(y)
			sDetail(x) = vDetail(y)
			Set dtime(x) = New NotesDateTime( vDate(y) )
			Call dtime(x).SetAnyTime
			x = x + 1			
		End If
	Next				
	
	'check for an overpayment with this payment id
	Forall o In doc.GetItemValue("OverpaymentID")
		If Cstr(o) = sPayment Then
			bRemoveOver = True
		End If
	End Forall
	
	If bRemoveOver Then
		RemovePayment = RemoveOverPayment(db, doc, sPayment) 
	End If
	
	'Update the payment details
	Call doc.ReplaceItemValue( "PaymentAmount", cAmount )			
	Call doc.ReplaceItemValue( "PaymentBy", sBy )
	Call doc.ReplaceItemValue( "PaymentID", sID )
	Call doc.ReplaceItemValue( "PaymentType", sType )
	Call doc.ReplaceItemValue( "PaymentDetail", sDetail )
	Call doc.ReplaceItemValue( "PaymentDate", dtime )
	
done:
	Exit Function
	
ErrorHandler:
	RemovePayment = "Payment removal error on line " & Erl &" err " & Err & "-" & Error
	Resume done
	
End Function

'++LotusScript Development Environment:2:1:ApplyOverpayment:1:8
Function ApplyOverpayment(ws As NotesUIWorkspace, db As NotesDatabase, doc As NotesDocument, lastapp As NotesDocument, paydoc As NotesDocument) As Integer
	Dim cOverpayTotal As Currency
	Dim sMessage As String
	Dim iOver As Integer
	Dim iRsp As Integer
	Dim cApply As Currency
	Dim i As Integer
	Dim cOverBal() As Currency
	Redim cOverBal(0) As Currency
	Dim vOverBal As Variant
	Dim tempPaydoc As NotesDocument
	
	ApplyOverpayment = 2
	
	vOverBal = lastapp.GetItemValue("OverpaymentBalance")
	
	Forall op In vOverBal
		If iOver > 0 Then
			Redim Preserve cOverBal(iOver) As Currency
		End If
		cOverpayTotal = cOverpayTotal + Ccur(op)
		cOverBal(iOver) = Ccur(op)
		iOver = iOver + 1
	End Forall
	
	If iOver > 1 Then sMessage = "There are outstanding overpayments totaling " & Format( cOverpayTotal, "Currency" ) & ". Would you like to apply them now?" Else sMessage = "There is an outstanding overpayment of " & Format( cOverpayTotal, "Currency" ) & ". Would you like to apply it now?"
	iRsp = Msgbox( sMessage, 3+32+0+0, "Overpayment" ) 
	
	ApplyOverpayment = iRsp
	
	If iRsp <> 6 Then 'cancel or no...then do normal payment process
		Exit Function
	Elseif iRsp = 6 Then 'yes...change amount on paydoc and if success input then delete overpayment info
		Call paydoc.ReplaceItemValue("Amount", cOverpayTotal)
		If Instr( 1, doc.GetItemValue("Type")(0), "volunteer", 5 ) = 0 Then		
			If ws.DialogBox( "CertificatePaymentInput", True, True, False, False, False, False, "", paydoc , True, False, True ) = False Then ApplyOverpayment = 2: Exit Function		
		End If
		
		'apply this payment to the OverpaymentBalance of lastapp
		cApply = Ccur(paydoc.Amount(0)) 'applicable amount
		i = Ubound(cOverBal)
		Do While (i >  -1 And cApply > 0)
			If Isnumeric(cOverBal(i)) Then
				If Ccur(cOverBal(i)) > 0 Then
					If Ccur(cOverBal(i)) <= cApply Then
						cApply = cApply - Ccur(cOverBal(i))
						cOverBal(i) = 0
					Else
						cOverBal(i) = cOverBal(i) - cApply
						cApply = 0
					End If
				End If
			End If
			i = i-1
		Loop
		
		Call lastapp.ReplaceItemValue("OverpaymentBalance", cOverBal)
		
		'If cApply > 0 Then 'user applying overpayment plus more
			'Set tempPaydoc = db.CreateDocument
			'Call paydoc.CopyAllItems(tempPaydoc)
			'Call tempPaydoc.ReplaceItemValue("Amount", cApply)
			'Call PostPayment(doc, tempPaydoc, db)
			'tempPaydoc.RemovePermanently( True ) 'delete the temp input doc we no longer need
		'End If
		
		Call lastapp.Save(True, True)
	End If
End Function

'++LotusScript Development Environment:2:1:GetMostRecentRenewal:1:8
Function GetMostRecentRenewal( appdoc As NotesDocument, IncludeApp As Boolean ) As NotesDocument
	Dim kids As NotesDocumentCollection
	Dim kid As NotesDocument
	Dim dtime As NotesDateTime
	Dim tmpdtime As NotesDateTime
	Dim mandoc As NotesDocument	
	Dim db As NotesDatabase	
	Dim sType As String
	
	Set GetMostRecentRenewal = Nothing		
	If appdoc Is Nothing Then Exit Function	
	
	Set db = appdoc.ParentDatabase
	If db Is Nothing Then Exit Function
	
	If appdoc.ParentDocumentUNID <> "" Then
		Set mandoc = db.GetDocumentByUNID(appdoc.ParentDocumentUNID)
	Else
		Set mandoc = db.GetDocumentByUNID(appdoc.ParentUNID(0))
	End If
	If mandoc Is Nothing Then Exit Function
	
	sType = appdoc.GetItemValue( "Type" )(0)
	If sType = "" Then Exit Function
	
	If IncludeApp Then 'gets called from the renewal query save and post payment subs which do not want the app included. gets called from UpdateManager which does
		Set dtime = New NotesDateTime( appdoc.GetItemValue( "ApplicationDate" )(0))		
		Set GetMostRecentRenewal = appdoc
	Else
		Set dtime = New NotesDateTime( "1/1/1980" )		
	End If
	
	Set kids = mandoc.Responses
	If Not kids Is Nothing Then
		If kids.count > 0 Then
			Set kid = kids.GetFirstDocument
			Do While Not kid Is Nothing
				If kid.Size > 0 Then
					If Not kid Is appdoc Then					
						If Not kid.HasItem( "Deleted" ) Then
							If kid.GetItemValue( "Form" )(0) = "CertificateRenewal" Then
								If kid.HasItem( "ApplicationDate" ) Then
									If kid.GetItemValue( "Type" )(0) = sType Then
										Set tmpdtime = New NotesDateTime( kid.GetItemValue( "ApplicationDate" )(0) )
										If tmpdtime.IsValidDate Then
											If tmpdtime.LSLocalTime > dtime.LSLocalTime Then	
												Set GetMostRecentRenewal = kid
												Set dtime = New NotesDateTime( kid.GetItemValue( "ApplicationDate" )(0) )							
											End If					
										End If
									End If
								End If
							End If
						End If
					End If
				End If
				Set kid = kids.GetNextDocument( kid )
			Loop
		End If 
	End If
	
End Function

'++LotusScript Development Environment:2:1:UpdateManager:1:8
Function UpdateManager( renewdoc As NotesDocument ) As Boolean
	Dim db As NotesDatabase
	Dim lastdoc As NotesDocument
	Dim mandoc As NotesDocument
	Dim bChange As Boolean
	Dim dtime As NotesDateTime
	Dim dtime2 As NotesDateTime	
	Dim sDateField As String
	Dim sIDField As String
	
	'Dim ProfessionalTypesTrim As String
	
	'only save if change
	bChange = False
	
	Set db = renewdoc.ParentDatabase		
	Set lastdoc = GetMostRecentRenewal( renewdoc, True )
	
	If lastdoc Is Nothing Then Set lastdoc = renewdoc
	
	If renewdoc.IsResponse Then 
		Set mandoc = db.GetDocumentByUNID( renewdoc.ParentDocumentUNID )
	Elseif renewdoc.HasItem( "ParentUNID" ) Then
		Set mandoc = db.GetDocumentByUNID( renewdoc.ParentUNID(0) ) 'new doc created in the ui
	End If
	
	If Not mandoc Is Nothing Then
%REM 'THIS DOES NOT WORK FOR FOOD CERTIFICATES ( AMTS-88ANJ5 Billing for Food Trainer Module)
		ProfessionalTypesTrim = Replace( lastdoc.GetItemValue( "Type" )(0), " ", "" )
		sDateField = "Last" & ProfessionalTypesTrim & "CertificateDate"
		sIDField = "Last" & ProfessionalTypesTrim & "CertificateID"
%ENDREM 'code replaced below  -NFAR-8CBNPY Food Manager's Certificate showing as Expired
		
		If Instr( 1, lastdoc.GetItemValue( "Type" )(0), "Food", 5 ) > 0 Then
			sDateField = "LastFoodCertificateDate"
			sIDField = "LastFoodCertificateID"
		Elseif  Instr( 1, lastdoc.GetItemValue( "Type" )(0), "Pierc", 5 ) > 0 Then 'gets Piercing, Piercer
			sDateField = "LastBodyPiercerCertificateDate"
			sIDField = "LastBodyPiercerCertificateID"
		Elseif  Instr( 1, lastdoc.GetItemValue( "Type" )(0), "Tattoo", 5 ) > 0 Then
			sDateField = "LastTattooistCertificateDate"
			sIDField = "LastTattooistCertificateID"
		Else
			If DBDesign <> "WA Violations" And DBDesign <> "Arizona Violations" Then 'don't care about last dates at the manager level
				Msgbox "Error! " & lastdoc.GetItemValue( "Type" )(0) & "  is not a recognized certificate type. Please contact support at HealthSpace"
			End If
			Exit Function 
		End If
		
		Set dtime = New NotesDateTime( lastdoc.GetItemValue( "ExpirationDate" )(0) )
		Call dtime.SetAnyTime
		If mandoc.HasItem( sDateField ) Then
			Set dtime2 = New NotesDateTime( mandoc.GetItemValue( sDateField )(0) )
			Call dtime2.SetAnyTime
			If dtime2.IsValidDate Then				
				If dtime.LSLocalTime <> dtime2.LSLocalTime Then					
					bChange = True
				End If
			Else				
				bChange = True
			End If
		Else			
			bChange = True
		End If	
		
		If bChange Then					
			Call SetDate( mandoc, sDateField, dtime.LSLocalTime )
			Call mandoc.ReplaceItemValue( sIDField, lastdoc.GetItemValue( "ID" )(0) )						
		End If			
		
		bChange = bChange Or CheckCertTypes( mandoc  ) Or CheckActiveCerts( mandoc  ) 
		
		If bChange Then			
			UpdateManager = mandoc.Save( False, False )
		End If
	End If	
	
	
End Function

'++LotusScript Development Environment:2:2:CreateRandomFee:1:8
Sub CreateRandomFee( Facility As NotesDocument )
	Dim uidoc As NotesUIDocument
	Dim doc As NotesDocument
	Dim indoc As NotesDocument
	Dim db As NotesDatabase
	Dim ws As New NotesUIWorkspace
	Dim sError As String
	
	Set uidoc = ws.CurrentDocument	
	Set doc = uidoc.Document
	Set db = doc.ParentDatabase
	Set indoc = db.CreateDocument	
	indoc.Form = "MiscFee"
	
	If ws.DialogBox( "MiscFee", True, True, False, False, False, False, "Additional Fee", indoc , True, False, True ) = False Then Exit Sub	
	If indoc.Amount(0) > 0 Then
		sError = AppendFee( doc, indoc, indoc.Date(0) )			
	End If
	
	If sError = "" Then
		Call uidoc.Refresh
	Else
		Messagebox "Fee Entry Failure - " & sError 		
	End If
	
End Sub

'++LotusScript Development Environment:2:1:CalculateTotalPayment:1:8
Function CalculateTotalPayment( vPayment As Variant ) As Currency
	
	If Isnumeric(vPayment(0)) = False Then
		CalculateTotalPayment = 0
		Exit Function
	End If
	If vPayment(0) = 0 Then
		CalculateTotalPayment = 0
		Exit Function
	End If
	
	Forall v In vPayment
		CalculateTotalPayment = CalculateTotalPayment + v
	End Forall		
	
End Function

'++LotusScript Development Environment:2:1:CalculateExpiryDateNotUsed:1:8
Function CalculateExpiryDateNotUsed( doc As NotesDocument, length As Integer ) As NotesDateTime
	Dim dtime As NotesDateTime
	'AZ NOW CALLS CalculateExpirationDate
	
	'Set CalculateExpiryDate = Nothing
	
	If Isdate( doc.GetItemValue( "EffectiveDate" )(0) ) Then
		Set dtime = New NotesDateTime( doc.EffectiveDate(0) )
		Call dtime.SetAnyTime
		Call dtime.AdjustYear(length)
		'Set CalculateExpiryDate = dtime
	End If
End Function

'++LotusScript Development Environment:2:1:RemoveOverPayment:1:8
Function RemoveOverPayment( db As NotesDatabase, doc As NotesDocument, sPayment As String ) As String	
	
	Dim cAmount() As Currency		
	Dim sBy() As String
	Dim sID() As String
	Dim sBalance() As String
	Dim dtime() As NotesDateTime
	Dim sDetail() As String
	
	Dim vAmount As Variant	
	Dim vBy As Variant
	Dim vID As Variant
	Dim vDate As Variant
	Dim vBalance As Variant
	Dim vDetail As Variant	
	
	Dim iStart As Integer, iEnd As Integer
	Dim sAmount As String, cPayAmount As Currency
	Dim sFeePay As String
	Dim sFirst As String, sLast As String
	Dim x As Integer, y As Integer, dx As Integer
	
	On Error Goto errorhandler
	
	RemoveOverPayment = ""
	
	On Error Goto ErrorHandler
	
	'doc multi value payment fields
	vAmount = doc.OverpaymentAmount 			
	vBy = doc.OverpaymentBy
	vID = doc.OverpaymentID
	vDate = doc.OverpaymentDate
	vBalance = doc.OverpaymentBalance
	
	x = 0
	Redim cAmount(x) As Currency		
	Redim sBy(x) As String
	Redim sID(x) As String
	Redim sBalance(x) As String
	Redim dtime(x) As NotesDateTime
	
	For y = 0 To Ubound( vID )
		If vID(y) <> sPayment Then
			'rebuild payments without selected
			Redim Preserve cAmount(x) As Currency	
			Redim Preserve sID(x) As String
			Redim Preserve sBy(x) As String
			Redim Preserve sBalance(x) As String
			Redim Preserve dtime(x) As NotesDateTime
			Redim Preserve sDate(x) As String
			
			cAmount(x) = vAmount(y)
			sBy(x) = vBy(y)
			sID(x) = vID(y)
			sBalance(x) = vBalance(y)
			Set dtime(x) = New NotesDateTime( vDate(y) )
			Call dtime(x).SetAnyTime
			x = x + 1			
		End If
	Next				
	
	'Update the payment details
	Call doc.ReplaceItemValue( "OverpaymentAmount", cAmount )			
	Call doc.ReplaceItemValue( "OverpaymentBy", sBy )
	Call doc.ReplaceItemValue( "OverpaymentID", sID )
	Call doc.ReplaceItemValue( "OverpaymentBalance", sBalance )
	Call doc.ReplaceItemValue( "OverpaymentDate", dtime )
	
done:
	Exit Function
	
ErrorHandler:
	RemoveOverPayment = "Over Payment removal error on line " & Erl &" err " & Err & "-" & Error
	Resume done
	
End Function


'++LotusScript Development Environment:2:2:CalculateEffectiveDate:1:8
Sub CalculateEffectiveDate( appdoc As NotesDocument, lastapp As NotesDocument, vPayDate As Variant )
	
	Dim appdtime As NotesDateTime
	Dim lastdtime As NotesDateTime
	Dim numdays As Long
	
	'function assumes the last app is paid in full (status = 'Payment Received' )
	If sDesign = "Wisconsin Violations" And appdoc.GetItemValue( "Type" )(0) = "Food Manager" Then		
		If Not lastapp Is Nothing Then
			If Isdate( appdoc.GetItemValue( "ApplicationDate" )(0) ) Then
				Set appdtime = New NotesDateTime( appdoc.GetItemValue( "ApplicationDate" )(0) )		
				Set lastdtime = New NotesDateTime( lastapp.GetItemValue( "ExpirationDate" )(0) )
				'if application date is six mo.  after expiration of last app, needs to be treated as a new app
				numdays = (appdtime.TimeDifference( lastdtime ) /60/60/24)
				If numdays < 183 Then 'less than six mo, effective from expiry of the last app
					Call lastdtime.AdjustDay( 1 )
					Call SetDate( appdoc, "EffectiveDate", lastdtime.LSLocalTime )
				Else 'new app effective payment date
					Call SetDate( appdoc, "EffectiveDate", vPayDate )
				End If
			Else 'new app effective payment date
				Call SetDate( appdoc, "EffectiveDate", vPayDate )
			End If		
		End If
		
	Else
		If Not lastapp Is Nothing Then			
			Set lastdtime = New NotesDateTime( lastapp.GetItemValue( "ExpirationDate" )(0) )
			'If sDesign <>  "Wisconsin Violations" Then Call lastdtime.AdjustDay( 1 ) 'should start the day following the expiration of the last app. (WI is anal)
			Call lastdtime.AdjustDay( 1 ) 
			Call SetDate( appdoc, "EffectiveDate", lastdtime.LSLocalTime )
		Else
			Call SetDate( appdoc, "EffectiveDate", vPayDate )
		End If
	End If
	
	
End Sub

'++LotusScript Development Environment:2:1:PostOverpayment:1:8
Function PostOverpayment( doc As NotesDocument, cOver As Currency ) As String
	
	Dim vAmount As Variant	
	Dim vBy As Variant
	Dim vDate As Variant
	Dim vID As Variant
	Dim vBal As Variant
	
	Dim cAmount() As Currency
	Dim cBal() As Currency
	Dim cID() As String
	Dim sBy() As String		
	Dim dtime() As NotesDateTime	
	Dim x As Integer	, y As Integer
	
	On Error Goto errorhandler
	
	PostOverPayment = ""	
	
	vID = doc.OverpaymentID	
	vDate = doc.OverpaymentDate
	vBy = doc.OverpaymentBy
	vAmount = doc.OverpaymentAmount
	vBal = doc.OverpaymentBalance
	
	'If Ubound( vAmount ) <> Ubound( vDate ) Or Ubound( vAmount ) <> Ubound( vBy ) Or Ubound( vAmount ) <> Ubound( vID ) Then
	'	PostPayment = "Payment arrays are out of sync. Unable to post payment."
	'	Exit Function
	'End If
	x = 0
	Redim sID(x) As String
	Redim sBy(x) As String	
	Redim cAmount(x) As Currency
	Redim cBal(x) As Currency
	Redim dtime(x) As NotesDateTime
	
	sID(x) = doc.GetItemValue( "PaymentID" )(Ubound(doc.GetItemValue("PaymentID"))) 'always be the first payment	with cert renewals
	sBy(x) = doc.GetItemValue( "PaymentBy" )(Ubound(doc.GetItemValue("PaymentID")))
	cAmount(x) = cOver
	cBal(x) = cOver
	Set dtime(x) = New NotesDateTime( doc.GetItemValue( "PaymentDate" )(0) )
	Call dtime(x).SetAnyTime
	
		'grab the existing details
	For y = 0 To Ubound( vID )
		If vID(y) <> "" Then
			x = x + 1				
			Redim Preserve sID(x) As String
			Redim Preserve sBy(x) As String
			Redim Preserve cAmount(x) As Currency	
			Redim Preserve cBal(x) As Currency
			Redim Preserve dtime(x) As NotesDateTime				
			sID(x) = vID(y)							
			sBy(x) = vBy(y)
			cAmount(x) = vAmount(y)
			cBal(x) = vBal(y)
			Set dtime(x) = New NotesDateTime( vDate(y) )
			Call dtime(x).SetAnyTime				
		End If
	Next				
	
	Call doc.ReplaceItemValue( "OverpaymentID", sID )
	Call doc.ReplaceItemValue( "OverpaymentBy", sBy )
	Call doc.ReplaceItemValue( "OverpaymentAmount", cAmount )
	Call doc.ReplaceItemValue( "OverpaymentBalance", cBal )
	Call doc.ReplaceItemValue( "OverpaymentDate", dtime )
	
	
done:
	Exit Function
	
errorhandler:
	PostOverpayment = "There was an error in the PostOverpayment function at line "  & Erl &" err " & Err & "-" & Error
	Goto done
End Function

'++LotusScript Development Environment:2:1:CheckExistingCert:1:8
Function CheckExistingCert( doc As NotesDocument ) As Boolean
	
	Dim kids As NotesDocumentCollection	
	Dim kid As NotesDocument
	
	CheckExistingCert = False
	
	'check for existing certificate
	Set kids = doc.Responses	
	If Not kids Is Nothing Then
		If kids.Count > 0 Then
			Set kid = kids.GetFirstDocument
			Do While Not kid Is Nothing			
				If Not kid.HasItem( "Deleted" ) Then
					If kid.Form(0) = "Certificate" Then				
						CheckExistingCert = True
						Exit Function
					End If				
				End If
				Set kid = kids.GetNextDocument( kid )
			Loop
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:1:CheckExistingManager:1:8
Function CheckExistingManager( Source As NotesUIDocument, sField As String ) As Boolean
	Dim db As NotesDatabase
	Dim sSNum As String, sDNum As String
	Dim view As NotesView
	Dim collection As NotesViewEntryCollection
	Dim sKey(0) As String	
	Dim sName As String, sNum As String, sLabel As String, sID As String, sView As String
	
	CheckExistingManager = False
	
	If Source.FieldGetText(sField) <> "" Then
		If sField = "DLNumber" Then
			sLabel = "Drivers License Number"
			sView = "ManagerDLNumLookup"
		Else
			sLabel = "Social Security Number"
			sView = "ManagerSSNumLookup"
		End If
		'need to check if an existing manager document for this person exists				
		Set db = Source.Document.ParentDatabase
		
		
		Set view = db.GetView( sView )
		
		If view Is Nothing Then
			Messagebox "Unable to locate the Manager " & sLabel & " lookup view. Please contact HealthSpace support",, "ERROR"
			CheckExistingManager = True
			Exit Function
		End If
		
		sKey(0) = Source.FieldGetText(sField)		
		
		Set collection = view.GetAllEntriesByKey(sKey)
		If collection.Count > 0 Then
			'found a duplicate
			Dim entry As NotesViewEntry
			Set entry = collection.GetFirstEntry 'only deal with the first one even if more than one
			
			sNum = entry.ColumnValues(0)			
			sName = entry.ColumnValues(1) & " " & entry.ColumnValues(2)	
			sID = entry.ColumnValues(3)			
			If Source.FieldGetText("DocumentID") <> sID Then 'not the current doc			
				If Messagebox( "There is an existing manager - " & sName & " with this " & sLabel & " (" & sNum & "). Would you like to view this manager?", 1+32+256+0, sLabel & " Exists" ) = 1 Then
					Dim ws As New NotesUIWorkspace
					Dim dupdoc As NotesDocument
					Set dupdoc = db.GetDocumentByUNID( entry.UniversalID )
					If Not dupdoc Is Nothing Then
						Call ws.EditDocument( False, dupdoc )
					End If				
				End If	
				CheckExistingManager = True
			End If
		End If	
	End If		
End Function

'++LotusScript Development Environment:2:2:CreateCertificate:1:8
Sub CreateCertificate( doc As NotesDocument, db As NotesDatabase )
	Dim certdoc As NotesDocument	
	
	
	Set certdoc = db.CreateDocument	
	certdoc.Form = "Certificate"
	certdoc.Type = doc.Type(0)
	certdoc.ID = doc.ID(0)
	If doc.BillingID(0) <> "" Then certdoc.BillingID = doc.BillingID(0)
	certdoc.Name = doc.Name	
	certdoc.MailingAddress = doc.MailingAddress
	certdoc.MailingCity = doc.MailingCity
	certdoc.MailingProvince = doc.MailingProvince
	certdoc.MailingPostalCode = doc.MailingPostalCode
	
	If doc.HasItem("LimitedDuties") Then certdoc.LimitedDuties = doc.LimitedDuties
	
	Call SetDate( certdoc, "ViewDate", doc.EffectiveDate(0))
	Call SetDate( certdoc, "EffectiveDate", doc.EffectiveDate(0))
	Call SetDate( certdoc, "ExpirationDate", doc.ExpirationDate(0))
	
	certdoc.ViewDescription = "Certificate # " & doc.ID(0) & " for " & certdoc.Name(0) & ", Expires " & Format( doc.ExpirationDate(0), "dd-mmm-yyyy" )	
	
	Call certdoc.MakeResponse( doc )
	Call certdoc.Save( True, True )
	Call certdoc.PutInFolder( "CertificatePrintQueue" )	
	
	
End Sub

'++LotusScript Development Environment:2:1:CheckActiveCerts:1:8
Function CheckActiveCerts( mandoc As NotesDocument ) As Boolean
	
	Dim session As New NotesSession	
	Dim renewdoc As NotesDocument
	Dim renewdocs As NotesDocumentCollection	
	Dim sOriginalStatus As String
	
	CheckActiveCerts = False
	
	If HSDocumentIsLive( mandoc ) Then		
		
		sOriginalStatus = mandoc.Status(0)
		mandoc.Status = "Not Active" 'assume he's dead
		
		Set renewdocs = mandoc.Responses
		If Not renewdocs Is Nothing Then
			If renewdocs.Count > 0 Then				
				
				Set renewdoc = renewdocs.GetFirstDocument
				While Not renewdoc Is Nothing 
					If renewdoc.Form(0) = "CertificateRenewal" And renewdoc.Status(0) = "Payment Received" And Not renewdoc.HasItem( "Deleted" ) Then
						mandoc.Status = "Active" 'Oh! he's not dead
					End If
					Set renewdoc = renewdocs.GetNextDocument( renewdoc )
				Wend
			End If ' renewdocs count > 0
		End If 'not renewdocs nothing
		
		CheckActiveCerts = sOriginalStatus <> mandoc.Status(0) 
		
	End If ' is live
	
End Function

'++LotusScript Development Environment:2:1:CalculateExpirationDate:1:8
Function CalculateExpirationDate( doc As NotesDocument ) As String
	Dim dtime As NotesDateTime
	Dim iYear As Integer
	Dim xamdtime As NotesDateTime
	Dim appdtime As NotesDateTime
	Dim effdtime As NotesDateTime
	Dim numdays As Long
	
	CalculateExpirationDate = ""
	
	If Isdate( doc.GetItemValue( "EffectiveDate" )(0) ) Then			
		If sDesign = "Wisconsin Violations" Then
			Set dtime = New NotesDateTime( doc.EffectiveDate(0) )
			Call dtime.SetAnyTime			
			If doc.GetItemValue( "Type" )(0) <> "" Then				
				If doc.GetItemValue( "Type" )(0) = "Food Manager" Then 'expires in five years						
				'If course date was within the last year, it expires 5 years from the application date. 
				'If prior to 1 year ago, it expires 5 years from the course date.
					If Isdate( doc.ApplicationDate(0) ) Then
						Set appdtime = New NotesDateTime( doc.ApplicationDate(0) )
						If Isdate( doc.ExamDate(0) ) Then
							Set xamdtime = New NotesDateTime( doc.ExamDate(0) )
							numdays = (appdtime.TimeDifference( xamdtime ) /60/60/24)
							If numdays < 365 Then 'course date less than 1 year ago
								Call appdtime.AdjustYear( 5 )
								Call appdtime.AdjustDay( -1 )
								Call SetDate( doc, "ExpirationDate", appdtime.LSLocalTime )							
							Else
								Call xamdtime.AdjustYear( 5 )
								Call xamdtime.AdjustDay( -1 )
								Call SetDate( doc, "ExpirationDate", xamdtime.LSLocalTime )
							End If							
						Else 'no course info if a batch renewal
							Set effdtime = New NotesDateTime( doc.EffectiveDate(0) )
							Call effdtime.AdjustYear( 5 )
							Call effdtime.AdjustDay( -1 )
							Call SetDate( doc, "ExpirationDate", effdtime.LSLocalTime )
						End If
					Else
						CalculateExpirationDate = "Invalid application date."
					End If					
				Else 'expires next Jun 30th				
					If Month(dtime.LSLocalTime) <4 Then			
						iYear = Year( dtime.LSLocalTime )	
					Else
						iYear = Year( dtime.LSLocalTime ) + 1					
					End If	
					Set dtime = New NotesDateTime( "30Jun" & Cstr( iYear) )		
					Call SetDate( doc, "ExpirationDate", dtime.LSLocalTime )					
				End If
			Else 'type = nothing
				CalculateExpirationDate = "Invalid activity type."
			End If	
			
		Elseif sDesign = "Arizona Violations" Then				
			Set dtime = New NotesDateTime( doc.EffectiveDate(0) )
			If doc.HasItem( "Length" ) Then
				If Isnumeric( doc.GetItemValue( "Length" )(0) ) Then					
					Call dtime.AdjustYear( doc.GetItemValue( "Length" )(0) )
					Call dtime.AdjustDay( -1 )
					Call SetDate( doc, "ExpirationDate", dtime.LSLocalTime )
				Else
					CalculateExpirationDate = "Application length is invalid."
				End If
			Else
				CalculateExpirationDate = "Application length is invalid."
			End If		
			
		Elseif sDesign = "TDH Violations" Then	'TDH all end Dec 31		
			Set dtime = New NotesDateTime( "December 31, " & Year(doc.EffectiveDate(0)) )		
			Call SetDate( doc, "ExpirationDate", dtime.LSLocalTime )
			
		Else 'one year i guess			
			Set dtime = New NotesDateTime( doc.EffectiveDate(0) )			
			Call dtime.AdjustYear( 1 )
			Call dtime.AdjustDay( -1 )
			Call SetDate( doc, "ExpirationDate", dtime.LSLocalTime )				
		End If
	Else
		CalculateExpirationDate = "Invalid effective date."
	End If 'Isdate( doc.GetItemValue( "EffectiveDate" )(0)
	
End Function

'++LotusScript Development Environment:2:1:SetTDHLockboxID:1:8
Function SetTDHLockboxID( mandoc As NotesDocument, appdoc As NotesDocument ) As Boolean
	Dim sID() As String
	Dim vID As Variant
	Dim iNum As Integer
	Dim sNum As String
	Dim dx As Integer
	
	SetTDHLockboxID = False
	
	'need to generate a 3 char number for the application for TDH renewal scan line. Payment needs to be applied to the app in the config db and there could be multiples for a manager 
	If mandoc.HasItem( "LockboxIDs" ) Then
		vID = mandoc.LockboxIDs
	End If
	
	If Isarray( vID ) Then
		dx = 0		
		For dx = 0 To Ubound( vID )
			Redim Preserve sID(dx) As String
			sID(dx) = vID(dx)
		Next
		iNum = sID(dx-1)
	Else
		iNum = 0
	End If
	
	Redim Preserve sID(dx) As String
	iNum = iNum + 1
	
	'999 app max per manager shouldn't be a problem
	sNum = Left( "000", 3-Len(Cstr(iNum))) & Cstr( iNum )
	sID(dx) = sNum
	
	Call mandoc.ReplaceItemValue( "LockboxIDs", sID )	
	Call appdoc.ReplaceItemValue( "LockboxID", sNum )
	
	
End Function

'++LotusScript Development Environment:2:1:PostPayment:1:8
Function PostPayment( renewdoc As NotesDocument, inputdoc As NotesDocument, db As NotesDatabase ) As String	
	Dim cAmount() As Currency
	Dim dtime() As NotesDateTime
	Dim sType() As String
	Dim sBy() As String
	Dim sID() As String
	Dim sDetail() As String
	Dim vAmount As Variant
	Dim vOverAmount As Variant
	Dim vDate As Variant
	Dim vType As Variant
	Dim vBy As Variant
	Dim vID As Variant
	Dim vDetail As Variant
	Dim vFee As Variant
	Dim x As Integer
	Dim cTotal As Currency
	Dim cOverpayTotal As Currency
	Dim cFeeTotal As Currency
	Dim mandoc As NotesDocument
	Dim session As New NotesSession
	Dim vPayid As Variant
	Dim cOver As Currency
	Dim sError As String
	
	PostPayment = ""
	x = 0
	
	Redim cAmount(x) As Currency
	Redim dtime(x) As NotesDateTime
	Redim sType(x) As String
	Redim sBy(x) As String
	Redim sID(x) As String
	Redim sDetail(x) As String
	
	'renewal doc multi value payment fields
	vAmount = renewdoc.PaymentAmount 
	vDate = renewdoc.PaymentDate
	vType = renewdoc.PaymentType
	vBy = renewdoc.PaymentBy
	vID = renewdoc.PaymentID
	vDetail = renewdoc.PaymentDetail
	vFee = renewdoc.FeeAmount
	vOverAmount = renewdoc.OverpaymentAmount
	
	If Ubound( vAmount ) <> Ubound( vDate ) Or Ubound( vAmount ) <> Ubound( vType ) Or Ubound( vAmount ) <> Ubound( vBy )_
	Or Ubound( vAmount ) <> Ubound( vID ) Or Ubound( vAmount ) <> Ubound( vDetail ) Then 'original payment fields
		PostPayment = "Payment arrays are out of sync. Unable to post payment."
		Exit Function		
	End If
	
	'previous values
	If Isnumeric( vAmount(0) ) Then
		If vAmount(0) > 0 Then
			For x = 0 To Ubound( vAmount )			
				Redim Preserve cAmount(x) As Currency				
				Redim Preserve dtime(x) As NotesDateTime
				Redim Preserve sType(x) As String
				Redim Preserve sBy(x) As String
				Redim Preserve sID(x) As String
				Redim Preserve sDetail(x) As String
				
				cAmount(x) = vAmount(x)
				Set dtime(x) = New NotesDateTime( vDate(x) )
				Call dtime(x).SetAnyTime
				sType(x) = vType(x)
				sBy(x) = vBy(x)
				sID(x) = vID(x)
				sDetail(x) = vDetail(x)				
			Next
		End If
		Redim Preserve cAmount(x) As Currency		
		Redim Preserve dtime(x) As NotesDateTime		
		Redim Preserve sType(x) As String
		Redim Preserve sBy(x) As String
		Redim Preserve sID(x) As String
		Redim Preserve sDetail(x) As String
	End If
	
	'new payment
	cAmount(x) = inputdoc.GetItemValue( "Amount" )(0)	
	Set dtime(x) = New NotesDateTime( inputdoc.GetItemValue( "Date" )(0)	 )
	Call dtime(x).SetAnyTime
	If inputdoc.GetItemValue( "Form" )(0) = "AdjustingEntry" Then
		sType(x) = "[adjustment]"
	Else
		If Trim(inputdoc.Type(0)) = "" Then sType(x) = "[none]" Else sType(x) = inputdoc.GetItemValue( "Type" )(0)
	End If
	
	sBy(x) = session.CommonUserName
	vPayid = Evaluate( "@Unique" )
	sID(x) = Cstr( vPayid(0) )
	If ( sDesign = "TDH Violations" Or sDesign = "EI Root Violations" ) Then 'TDH has an additional field for cd number
		If Trim(inputdoc.CDNumber(0)) <> "" Then  
			sDetail(x) = "CD # " & Trim( inputdoc.CDNumber(0) ) 
			If Trim(inputdoc.Details(0)) <> "" Then sDetail(x) = sDetail(x) & ", " & inputdoc.GetItemValue( "Details" )(0)
		Else
			If Trim(inputdoc.Details(0)) = "" Then sDetail(x) = "[none]" Else sDetail(x) = inputdoc.GetItemValue( "Details" )(0)
		End If		
	Else 
		If Trim(inputdoc.Details(0)) = "" Then sDetail(x) = "[none]" Else sDetail(x) = inputdoc.GetItemValue( "Details" )(0)
	End If
	
	'Call inputdoc.RemovePermanently( True ) 'delete the temp input doc we no longer need (can't do this for a batch run)
	
	Call renewdoc.ReplaceItemValue( "PaymentAmount", cAmount )	
	Call renewdoc.ReplaceItemValue( "PaymentDate", dtime )		
	Call renewdoc.ReplaceItemValue( "PaymentType", sType )
	Call renewdoc.ReplaceItemValue( "PaymentBy", sBy )		
	Call renewdoc.ReplaceItemValue( "PaymentID", sID )		
	Call renewdoc.ReplaceItemValue( "PaymentDetail", sDetail )	
	
	'account for possible overpayment balances in total payment amount
	cOverpayTotal = CalculateTotalPayment( vOverAmount )	
	
	cTotal = CalculateTotalPayment( cAmount )	- cOverpayTotal
	cFeeTotal = CalculateTotalPayment( vFee )	
	
	Call renewdoc.ReplaceItemValue( "TotalPayment", cTotal )
	
	If cTotal > cFeeTotal Then	'hope none of the clients wants this here. Need to apply overpayment (sy - MKIR-8JJLGS Managers need modification)
		'PostPayment = "Payment exceeds the outstanding balance. Payment failed for " & renewdoc.Name(0)	
		cOver = cTotal - cFeeTotal 
		sError = PostOverpayment(renewdoc, cOver)
		If sError <> "" Then
			PostPayment = "Error while applying an overpayment for this renewal!"
		End If
		Call renewdoc.ReplaceItemValue( "BalanceOwing", 0)		
	Else
		Call renewdoc.ReplaceItemValue( "BalanceOwing", cFeeTotal - cTotal )		
	End If
	
	If cFeeTotal <= cTotal Then 'full payment received, create the certificate					
		Call renewdoc.ReplaceItemValue( "Status", "Payment Received" ) 'view key	
		Call UpdateManager( renewdoc ) 
		If CheckExistingCert( renewdoc ) = False Then	Call CreateCertificate( renewdoc, db ) 				
	End If
	renewdoc.ViewDescription = renewdoc.GetItemValue( "Type" )(0) & " Application " & renewdoc.ID(0) &  ", " & renewdoc.Name(0) &  " on " & Format( renewdoc.EffectiveDate(0), "dd-mmm-yyyy" )_
	& ", " & renewdoc.Status(0)
	
End Function

'++LotusScript Development Environment:2:1:AppendFee:1:8
Function AppendFee( doc As NotesDocument, indoc As NotesDocument, Byval vEnd As Variant ) As String
	
	Dim vAmount As Variant
	Dim vPAmount As Variant	
	Dim vBy As Variant
	Dim vType As Variant
	Dim vID As Variant
	Dim vHist As Variant	
	Dim vDate As Variant	
	
	Dim cAmount() As Currency
	
	Dim sID() As String
	Dim sBy() As String	
	Dim sType() As String	
	Dim dtime() As NotesDateTime
	
	Dim x As Integer, i As Integer
	Dim cTotal As Currency	
	Dim session As New NotesSession
	Dim vFeeNum As Variant
	Dim cTot As Currency
	
	
	If doc Is Nothing Then AppendFee = "No longer have a handle on the manager document" : Exit Function
	
	AppendFee = ""
	x = 0
	cTot = 0
	
	If doc.GetItemValue( "FeeAmount" )(0) = "" Then 
		Call doc.ReplaceItemValue( "FeeAmount", doc.GetItemValue( "Amount" )(0) )		
	End If
	
	vAmount = doc.FeeAmount
	vDate = doc.FeeDate
	vBy = doc.FeeBy
	vType = doc.FeeType	
	vID = doc.FeeID	
	
	If Ubound( vAmount ) <> Ubound( vDate ) Or Ubound( vAmount ) <> Ubound( vBy ) Or Ubound( vAmount ) <> Ubound( vType ) Or Ubound( vAmount ) <> Ubound( vID ) Then	
		AppendFee = "Fee arrays are out of sync. Unable to add fee."
		Exit Function
	End If	
	
	'add previous values
	If Isnumeric( vAmount(0) ) Then		
		For i = 0 To Ubound( vAmount )				
			Redim Preserve cAmount(x) As Currency					
			Redim Preserve dtime(x) As NotesDateTime
			Redim Preserve sBy(x) As String
			Redim Preserve sType(x) As String
			Redim Preserve sID(x) As String			
			cAmount(x) = vAmount(i)
			Set dtime(x) = New NotesDateTime( vDate(i) )
			Call dtime(x).SetAnyTime
			sBy(x) = vBy(i)
			sType(x) = vType(i)
			sID(x) = vID(i)
			x = x + 1			
		Next			
	End If
	
	Redim Preserve cAmount(x) As Currency
	Redim Preserve sID(x) As String
	Redim Preserve sBy(x) As String
	Redim Preserve sType(x) As String
	Redim Preserve dtime(x) As NotesDateTime
	
	'add new values to the arrays
	cAmount(x) = indoc.Amount(0)
	Set dtime(x) = New NotesDateTime( vEnd )
	Call dtime(x).SetAnyTime
	sBy(x) = session.CommonUserName		
	sID(x) = indoc.ID(0)
	If indoc.GetItemValue( "Form" )(0) = "AdjustingEntry" Then sType(x) = "Adj - " & indoc.Description(0) 	Else sType(x) = indoc.Description(0) 	
	
	Call doc.ReplaceItemValue( "FeeAmount", cAmount )	
	Call doc.ReplaceItemValue( "FeeDate", dtime )
	Call doc.ReplaceItemValue( "FeeBy", sBy )
	Call doc.ReplaceItemValue( "FeeID", sID )
	Call doc.ReplaceItemValue( "FeeType", sType )
	
End Function

'++LotusScript Development Environment:2:1:CheckCertTypes:1:8
Function CheckCertTypes( mandoc As NotesDocument ) As Boolean	
	Dim session As New NotesSession	
	Dim renewdoc As NotesDocument
	Dim renewdocs As NotesDocumentCollection	
	Dim TypesItem As NotesItem
	Dim sOriginalCertTypes As String
	
	CheckCertTypes = False
	
	If HSDocumentIsLive( mandoc ) Then		
		Set renewdocs = mandoc.Responses
		If Not renewdocs Is Nothing Then
			If renewdocs.Count > 0 Then				
				If mandoc.HasItem( "PermitTypes" ) Then
					Set TypesItem = mandoc.GetFirstItem( "PermitTypes" )
					sOriginalCertTypes = TypesItem.Text
				Else
					sOriginalCertTypes = ""
				End If
				Set TypesItem = mandoc.ReplaceItemValue( "PermitTypes", "" )
				
				Set renewdoc = renewdocs.GetFirstDocument
				While Not renewdoc Is Nothing
					'don't log deleted docs
					If renewdoc.Form(0) = "CertificateRenewal" And Not renewdoc.HasItem( "Deleted" ) Then
						
						If Not TypesItem.Contains( renewdoc.Type(0) ) Then TypesItem.AppendToTextList( renewdoc.Type(0) )
						
					End If 'certificate and not deleted
					Set renewdoc = renewdocs.GetNextDocument( renewdoc )
				Wend
				
				CheckCertTypes = sOriginalCertTypes <> TypesItem.Text
				
			End If ' renewdocs count > 0
		End If 'not renewdocs nothing
	End If ' owner is nil
	
End Function

'++LotusScript Development Environment:2:1:SetRenewalFields:1:8
Function SetRenewalFields( newdoc As NotesDocument, opdoc As NotesDocument, globdoc As NotesDocument, sType As String, session As NotesSession ) As String
	Dim vTypes As Variant
	Dim vAmounts As Variant
	Dim cAmount As Currency
	Dim bFnd As Boolean
	Dim dx As Integer
	Dim dtime As NotesDateTime
	
	SetRenewalFields = ""
	
	If globdoc.HasItem( "ProfessionalTypes" ) And globdoc.HasItem( "ProfessionalAmounts" ) Then
		vTypes = globdoc.ProfessionalTypes
		vAmounts = globdoc.ProfessionalAmounts
	End If
	
	If Isarray( vTypes ) = False Or Isarray( vAmounts ) = False Then SetRenewalFields = "Global settings professional types or amounts of are not set. Please contact a system administrator" : Exit Function
	
	bFnd = False	
	For dx = 0 To Ubound( vTypes )
		If vTypes(dx) = sType Then
			bFnd = True
			cAmount = Ccur( vAmounts(dx) )
			Exit For
		End If
	Next
	If Not bFnd Then SetRenewalFields = "Unable to find a renewal amount in global settings for " & sType & ". Please contact a system administrator" : Exit Function
	
	newdoc.Form = "CertificateRenewal"	
	newdoc.Type = sType
	newdoc.ParentUNID = opdoc.UniversalID
	Call newdoc.MakeResponse(opdoc)
	
	'office address
	If sType <> "Food Manager" Then
		newdoc.OfficePayTo = globdoc.GetItemValue( "LockboxOfficePayTo" )(0)
		newdoc.OfficeName = globdoc.GetItemValue( "LockboxOfficeName" )(0)
		newdoc.OfficeAddress = globdoc.GetItemValue( "LockboxOfficeAddress" )(0)
		newdoc.OfficeCity = globdoc.GetItemValue( "LockboxOfficeCity" )(0)
		newdoc.OfficeProvince = globdoc.GetItemValue( "LockboxOfficeProvince" )(0)
		newdoc.OfficePostalCode = globdoc.GetItemValue( "LockboxOfficePostalCode" )(0)		
		newdoc.OfficePhone = globdoc.GetItemValue( "LockboxOfficePhone" )(0)		
	Else
		newdoc.OfficePayTo = globdoc.GetItemValue( "OfficePayTo" )(0)
		newdoc.OfficeName = globdoc.GetItemValue( "OfficeName" )(0)
		newdoc.OfficeAddress = globdoc.GetItemValue( "OfficeAddress" )(0)
		newdoc.OfficeCity = globdoc.GetItemValue( "OfficeCity" )(0)
		newdoc.OfficeProvince = globdoc.GetItemValue( "OfficeProvince" )(0)
		newdoc.OfficePostalCode = globdoc.GetItemValue( "OfficePostalCode" )(0)
		newdoc.OfficePhone = globdoc.GetItemValue( "OfficePhone" )(0)		
	End If
	
	newdoc.Name = opdoc.GetItemValue( "Name" )(0)			
	newdoc.FirstName = opdoc.GetItemValue( "FirstName" )(0)				
	newdoc.LastName = opdoc.GetItemValue( "LastName" )(0)				
	newdoc.MailingAddress = opdoc.GetItemValue( "MailingAddress" )(0)
	newdoc.MailingCity = opdoc.GetItemValue( "MailingCity" )(0)
	newdoc.MailingProvince = opdoc.GetItemValue( "MailingProvince" )(0)
	newdoc.MailingPostalCode = opdoc.GetItemValue( "MailingPostalCode" )(0)				
	
	newdoc.ID = Evaluate( "@Unique" )
	newdoc.Status = "Pending"	
	newdoc.Amount = cAmount
	newdoc.FeeAmount = cAmount
	newdoc.FeeBy = session.CommonUserName	
	newdoc.FeeType = "Renewal"
	newdoc.FeeID = Evaluate( "@Unique" )	
	
	newdoc.ViewDescription = sType & " Application " & newdoc.ID(0) &  ", " & newdoc.Name(0) &  " on " & Format( newdoc.EffectiveDate(0), "dd-mmm-yyyy" )_
	& ", Pending"
	
	
End Function

'++LotusScript Development Environment:2:1:IsMgrInactive:1:8
Function IsMgrInactive( m As NotesDocument ) As Boolean
	
	'M must be a real doc, dont call this with nothing or a stub!
	
	IsMgrInactive = True
	
	Dim renewdoc As NotesDocument
	Dim renewdocs As NotesDocumentCollection	
	
	Set renewdocs = m.Responses
	If Not renewdocs Is Nothing Then
		Set renewdoc = renewdocs.GetFirstDocument
		While Not( renewdoc Is Nothing )
			If HSDocumentIsLive( renewdoc ) Then		
				If renewdoc.Form(0) = "CertificateRenewal" Then
					If Instr( " Expired Cancelled Delinquent Out of Business ", renewdoc.Status(0) ) = 0 Then 'any status other than these is probably active
						IsMgrInactive = False
					End If 'inst
				End If 'form = cert renew
			End If 'deleted,0 etc
			Set renewdoc = renewdocs.GetNextDocument( renewdoc )
		Wend
	End If 'not renewdocs nothing
	
End Function

'++LotusScript Development Environment:2:2:SetAmount:1:8
Sub SetAmount
	Dim ws As New NotesUIWorkspace
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim uidoc As NotesUIDocument
	Dim doc As NotesDocument
	Dim globdoc As NotesDocument
	Dim vType As Variant, vAmount As Variant
	Dim dx As Integer
	Dim dtime As NotesDateTime
	
	Set uidoc = ws.CurrentDocument
	Set doc = uidoc.Document
	Set db = uidoc.Document.ParentDatabase
	Set globdoc = db.GetProfileDocument( "GlobalSettings" )
	
	If globdoc.HasItem( "ProfessionalTypes" ) = False Or globdoc.HasItem( "ProfessionalAmounts" ) = False Then
		Messagebox "Activity rates are not set in global settings. Unable to set the renewal amount"
		Exit Sub
	End If
	
	If Isdate( uidoc.FieldGetText( "ApplicationDate" )) Then
		vType = globdoc.ProfessionalTypes
		vAmount = globdoc.ProfessionalAmounts
		
		For dx = 0 To Ubound( vType )
			If vType(dx) = uidoc.Document.Type(0) Then
				Call doc.ReplaceItemValue( "Amount", vAmount(dx) )
				Call doc.ReplaceItemValue( "FeeAmount", vAmount(dx) )
				Call doc.ReplaceItemValue( "FeeBy", session.CommonUserName	 )
				Call doc.ReplaceItemValue( "FeeID", Evaluate( "@Unique" ))
				Call doc.ReplaceItemValue( "FeeType", "Renewal" )
				Set dtime = New NotesDateTime( uidoc.FieldGetText( "ApplicationDate" ) )
				Call SetDate( doc, "FeeDate", dtime.LSLocalTime )
				Call uidoc.Refresh
				Exit Sub
			End If
		Next
	End If
	
End Sub
