'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Explicit

Use "General"


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub Initialize
Declare Function EncryptPassword(inpPassword As String) As String
Declare Function AgentPassword( session As NotesSession, ws As NotesUIWorkSpace ) As Variant
Declare Private Function Audit_Doc( DB As NotesDatabase, Doc As NotesDocument ) As NotesDocument
Declare Private Function AuditFormChanges_Save( Doc As NotesDocument, AuditFormChanges_OpenValues List As String )
Declare Function Audit_SaveEvent( Doc As NotesDocument, AuditFormChanges_OpenValues List As String, NewDocument As Variant ) As Variant
Declare Sub AuditFormChanges_Init( Doc As NotesDocument, AuditFormChanges_OpenValues List As String )
Declare Function Audit_DeleteEvent( Doc As NotesDocument, Soft As Variant ) As Variant
Declare Sub SendEmailNotification(db As NotesDatabase, session As NotesSession, ListOfFields As Variant, NumberOfDocs As Integer)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Dim SystemFields( 1 To 6 ) As String

'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	SystemFields(1) = "OriginalModTime"
	SystemFields(2) = "StatusHistory"
	SystemFields(3) = "dispStatusHistory"
	SystemFields(4) = "ViewDescription"
	SystemFields(5) = "VIOLATIONDISPLAY"
	SystemFields(6) = "dispViolations"
End Sub

'++LotusScript Development Environment:2:1:EncryptPassword:1:8
Function EncryptPassword(inpPassword As String) As String
	Dim tempVar As Variant
	
	tempVar = Evaluate( {@Password("} &  InpPassword & {")} )
	
	EncryptPassword = tempVar(0)
End Function


'++LotusScript Development Environment:2:1:AgentPassword:1:8
Function AgentPassword( session As NotesSession, ws As NotesUIWorkSpace ) As Variant
%REM
	'wrap your agent with an if statement like
	If AgentPassword( session, ws ) Then
		'do the stuff
		Msgbox "Hello World!"
	End If
%END REM
	
	Dim answer As String
	Dim EncryptedDanger As String
	Dim EncryptedWarning As String
	Dim Encrypted6042Tools As String
	Dim MrUser As New NotesName( session.username )
	Dim globaldoc As notesdocument
	Dim db As notesdatabase
	
	Set db = session.currentdatabase
	EncryptedDanger = EncryptPassword("DANGER")
	EncryptedWarning = EncryptPassword("WARNING")
	Encrypted6042Tools = EncryptPassword("6042Tools")
	
	answer = Right$( MrUser.Abbreviated, Len( "office/healthspace" ) ) ' check for office or Vdh employees
	If Instr( answer, "/" ) = 3 Then answer = Right$( answer, Len( "vdh/healthspace" ) )
	answer = Left$( answer, Instr( answer, "/" ) - 1 )
	If answer = "Office" Or answer = "VDH" Then
		AgentPassword = True
		Exit Function
	Else
		answer = Right$( MrUser.Abbreviated, Len( "service/healthspace" ) ) ' check for HS Agent
		answer = Left$( answer, Instr( answer, "/" ) - 1 ) 
		If answer = "Service" Then
			AgentPassword = True
			Exit Function
		Else
			Set globaldoc = HSGetProfileDocument(db, "GlobalSettings")
			If globaldoc.enforceagentpassword(0) <> "No" Then
				answer = ws.Prompt( PROMPT_PASSWORD, "Password Prompt", "Please enter the password to run this agent.", "", "" )
			Else
				answer = "WARNING"
			End If
		End If
	End If
	
	answer = EncryptPassword(answer)
	
	If _
	db.ReplicaID="88256A4600619B28" Or _   'North-East Live
	db.ReplicaID="882569C8007E3253" Or _   'North-West Live
	db.ReplicaID="882569CB001230CF" Or _   'Northern Interior Live
	db.ReplicaID="8825697600679E85" Or _    'Northern-Interior EHS Testing & Training
	db.ReplicaID="882569FD0014A3B5" Or _   'North-East EHS Testing & Training
	db.ReplicaID="882569A10071D23E" _       'North-West EHS Testing & Training
	Then
		If globaldoc.Password(0) = "" Then
			If answer = EncryptedWarning Then
				AgentPassword = True
			Else
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		Else
			If answer = globaldoc.Password(0) Then
				AgentPassword = True
			Else
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		End If
		
		Elseif _
		db.ReplicaID="88256A43001120A9" Or _    'Coast Garibaldi Live
		db.ReplicaID="882569D7000CA72C" _       'Coast Garibaldi EHS Testing & Training
	Then
		If globaldoc.Password(0) = "" Then
			If answer = Encrypted6042Tools Then
				AgentPassword = True
			Else 
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		Else
			If answer = globaldoc.Password(0) Then
				AgentPassword = True
			Else
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		End If
	Else
		If globaldoc.Password(0) = "" Then
			If answer = EncryptedDanger Then
				AgentPassword = True
			Else
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		Else
			If answer = globaldoc.Password(0) Then
				AgentPassword = True
			Else
				Msgbox("Password is invalid.")
				AgentPassword = False	
			End If
		End If
	End If	
	
End Function

'++LotusScript Development Environment:2:1:Audit_Doc:1:8
Private Function Audit_Doc( DB As NotesDatabase, Doc As NotesDocument ) As NotesDocument
	Dim Session As New NotesSession
	Dim Agent As NotesAgent
	Dim ReaderNames As NotesItem
	Dim AuditDoc As NotesDocument
	
	Set AuditDoc = DB.CreateDocument
	AuditDoc.Form = "AuditEvent"
	AuditDoc.DocumentID = Evaluate( "@Unique" )
	AuditDoc.Date = Today
	AuditDoc.Time = Now
	
	Set ReaderNames = AuditDoc.ReplaceItemValue("CanRead","LocalDomainServers")
	Call ReaderNames.AppendToTextList( "[Auditor]" )
	ReaderNames.IsReaders = True
	
	Set Agent = Session.CurrentAgent
	If Not Agent Is Nothing Then
		AuditDoc.Agent = Agent.Name
	End If
	
	AuditDoc.User = Session.CommonUserName
	AuditDoc.UserACL = DB.CurrentAccessLevel
	AuditDoc.UserRoles = Evaluate("@UserRoles")
	
	If Not Doc Is Nothing Then
		AuditDoc.ID = Doc.UniversalID
		AuditDoc.Document = Doc.DocumentID
		AuditDoc.DocumentForm = Doc.Form
		If Doc.HasItem( "Name" ) Then
			AuditDoc.Name = Doc.Name(0)
		Elseif Doc.HasItem( "FacilityName" ) Then
			AuditDoc.Name = Doc.FacilityName(0)
		End If
	End If
	Set Audit_Doc = AuditDoc
End Function

'++LotusScript Development Environment:2:1:AuditFormChanges_Save:1:8
Private Function AuditFormChanges_Save( Doc As NotesDocument, AuditFormChanges_OpenValues List As String )
	Dim Session As New NotesSession
	Dim StatusHistory List As Variant
	Dim sName As String
	
	'dont bother for new docs
	If Not( Doc.IsNewNote ) Then
		
		Forall Item In Doc.Items
			sName = Lcase(Item.Name)
			'don't bother for system fields
			If Not( Left( Item.Name, 1 ) = "$" ) Then
				'don't bother for originalmodtime (lotus) or statushistory/viewdescription (healthspace)
				If Isnull( Arraygetindex( SystemFields, Item.Name ) ) Then
					'avoid the show stopping invalid element tag error (from new fields)
					If Iselement( AuditFormChanges_OpenValues(sName)) Then
						If AuditFormChanges_OpenValues(sName) <> Item.Text Then
							StatusHistory(Item.Name) = Item.Name & " from """ & AuditFormChanges_OpenValues(sName) & """ to """ & Item.Text & """"
						End If
					Else
						'Isn't an element, must be new
						If Isarray( Item.Values ) Then
							Forall Value In Item.Values
								StatusHistory(Item.Name) = Item.Name & " value: """ & Item.Text  & """"
							End Forall
						End If
					End If
				End If
			End If
		End Forall
	End If
	
	Call AuditFormChanges_Init(Doc,AuditFormChanges_OpenValues)
	
	AuditFormChanges_Save = StatusHistory
End Function

'++LotusScript Development Environment:2:1:Audit_SaveEvent:1:8
Function Audit_SaveEvent( Doc As NotesDocument, AuditFormChanges_OpenValues List As String, NewDocument As Variant ) As Variant
	Dim Session As New NotesSession
	Dim DB As NotesDatabase
	Dim AuditDoc As NotesDocument
	Dim Changes As Variant
	Dim Item As NotesRichTextItem
	Dim bFoundOne As Variant
	
	Audit_SaveEvent = False
	
	Set DB = Session.CurrentDatabase
	If Not DB Is Nothing Then
		Set AuditDoc = Audit_Doc(DB, Doc)
		If Not AuditDoc Is Nothing Then
			If NewDocument Then
				AuditDoc.Event = "Document Creation"
			Else
				AuditDoc.Event = "Document Save"
			End If
			Changes = AuditFormChanges_Save(Doc, AuditFormChanges_OpenValues)
			bFoundOne = False
			Set Item = New NotesRichTextItem( AuditDoc, "Details" )
			If Islist(Changes) Then
				Forall Change In Changes
					bFoundOne = True
					Call Item.AppendText( Changes(Listtag(Change)) & Chr(10) )
				End Forall
			End If
			If bFoundOne = False Then
				Call Item.AppendText("(No Changes)")
			End If
			'Save
			Audit_SaveEvent = AuditDoc.Save(True,True)
		End If
	End If
End Function

'++LotusScript Development Environment:2:2:AuditFormChanges_Init:1:8
Sub AuditFormChanges_Init( Doc As NotesDocument, AuditFormChanges_OpenValues List As String )
	Dim Values() As Variant
	Dim sName As String
	
	If Not Doc Is Nothing Then
		'don't bother for new docs
		If Not Doc.IsNewNote Then
			'Prepare Array for Values
			Forall Item In Doc.Items
				'don't bother for system fields
				If Not( Left( Item.Name, 1 ) = "$" ) Then
					'don't bother for originalmodtime (lotus) or statushistory/viewdescription (healthspace)
					If Isnull( Arraygetindex( SystemFields, Item.Name ) ) Then
						sName = Lcase(Item.Name)
						AuditFormChanges_OpenValues(sName) = Item.Text
					End If
				End If
			End Forall
		End If
	End If
End Sub


'++LotusScript Development Environment:2:1:Audit_DeleteEvent:1:8
Function Audit_DeleteEvent( Doc As NotesDocument, Soft As Variant ) As Variant
	Dim Session As New NotesSession
	Dim DB As NotesDatabase
	Dim AuditDoc As NotesDocument
	
	Audit_DeleteEvent = False
	
	Set DB = Session.CurrentDatabase
	If Not DB Is Nothing Then
		Set AuditDoc = Audit_Doc(DB, Doc)
		If Not AuditDoc Is Nothing Then
			If Soft = True Then
				AuditDoc.Event = "Document Deletion - Soft"
			Else
				AuditDoc.Event = "Document Deletion - Hard"
			End If
			'Save
			Audit_DeleteEvent = AuditDoc.Save(True,True)
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:2:SendEmailNotification:1:8
Sub SendEmailNotification(db As NotesDatabase, session As NotesSession, ListOfFields As Variant, NumberOfDocs As Integer)
	Dim EmailDoc As NotesDocument
	Dim globalDoc As NotesDocument
	Dim EmailBody As NotesRichTextItem
	Dim MrUser As New NotesName( session.username )
	Dim UserAccess As Variant
	Dim ToBeNotified As Variant
	Dim recipients() As String
	Dim answer As String
	Dim hasAccess As Boolean
	Dim i As Integer
	
	'if Healthspace employee or VDH super user is using tool we will assume they know what they are doing....
	answer = Right$( MrUser.Abbreviated, Len( "office/healthspace" ) )
	If Instr( answer, "/" ) = 3 Then answer = Right$( answer, Len( "vdh/healthspace" ) )
	answer = Left$( answer, Instr( answer, "/" ) - 1 )
	If answer = "Office" Or answer = "VDH" Then
		Exit Sub
	End If
	
	Set globalDoc = HSGetProfileDocument(db, "GlobalSettings")
	
	'set up some common variables
	Redim recipients(0) As String
	If Not globaldoc Is Nothing Then ToBeNotified = globalDoc.getItemValue("EmailNotification")
	hasAccess = False
	UserAccess = Evaluate({@UserRoles})
	
	'check if has admin or auditor role
	If Isarray(UserAccess) Then
		For i = 0 To Ubound(UserAccess)
			If UserAccess(i) = "[Administrator]" Then
				hasAccess = True
			Elseif UserAccess(i) = "[Auditor]" Then
				hasAccess = True
			End If
		Next
	End If
	
	'build list of recipients from global settings field
	If Isarray(ToBeNotified) Then
		For i = 0 To Ubound(ToBeNotified)
			If ToBeNotified(i) <> "" Then
				If recipients(0) = "" Then
					recipients(0) = Cstr(ToBeNotified(i))
				Else
					Redim Preserve recipients(Ubound(recipients) + 1) As String
					recipients(Ubound(recipients)) = Cstr(ToBeNotified(i))
				End If
			End If
		Next
	End If
	
	'if not supposed to have access, build and send email notification
	If Not hasAccess Then
		If recipients(0) <> "" Then
			Set EmailDoc = db.CreateDocument
			Set EmailBody = New NotesRichTextItem(EmailDoc, "Body")
			Call EmailBody.AppendText("This email has been sent to notify you that the following user:  ")
			Call EmailBody.AppendText(MrUser.Abbreviated)
			Call EmailBody.AddNewline(2)
			Call EmailBody.AppendText("Has been granted access to a system agent but does not have the [Administrator] or [Auditor] role.")
			Call EmailBody.AddNewline(3)
			Call EmailBody.AppendText("The following fields were updated on " & NumberOfDocs & " documents.")
			Call EmailBody.AddNewline(2)
			Call EmailBody.AppendText("Fields:")
			Call EmailBody.AddNewline(1)
			If Isarray(ListOfFields) Then
				For i = 0 To Ubound(ListOfFields)
					Call EmailBody.AppendText(ListOfFields(i))
					Call EmailBody.AddNewline(1)
				Next
			Else
				If ListOfFields <> "" Then
					Call EmailBody.AppendText(Cstr(ListOfFields))
					Call EmailBody.AddNewline(1)
				End If
			End If
			EmailDoc.Form = "Memo"
			EmailDoc.Subject = "Possible un-authorized access notification"
			EmailDoc.SendTo = recipients
			EmailDoc.ReplyTo = "Support@Healthspace.com"
			EmailDoc.CopyTo = "Support@Healthspace.com"
			Call EmailDoc.Send(False)
		End If
	End If
End Sub