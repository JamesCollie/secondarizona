'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class AgentLogger
Declare Function AgentInfo(db As notesdatabase, session As notessession) As notesagent

'++LotusScript Development Environment:2:5:(Declarations):0:10
'=======================================================================
'ATTENTION!!!! Every time this is updated you MUST increment the log versions! No exceptions!
'=======================================================================
Const AgentLoggerVersion = 2.2
Const HSAgentLogReplicaID = "8825694D001E6577"
' 2.0.2 AJP 23Jul04: Added Store method and RecordingStats to save doc # stats automatically while
'	retaining behaviour that ver1 agents not produce items at all
' 2.0.3 EPB 14Sep04: Added public and private function designations (made Store function private)
' 2.0.4 EPB 10Dec04: Added code to record warnings that are not agent failures
' 2.0.5 DH 17Jan04: Created "AddLink" method for appending doc links to output
' 2.0.5(b) MNV 31Aug05: Added timestomping. This class won't compile in Notes 5 (requires Notes6 stuff like Color)
' 2.0.6 EPB 18May06: Merged LogMessageItem functions. Removed timestomping for blank messages.
' 2.0.7 EPB 07Jun06: Added document-level error logging.
' 2.0.8 EPB 21Jun06: Fixed crash when adding document links for documents in databases without default views
' 2.0.9 JBC 21Nov06: Added old features from HSAgentLog: SetOwner (renamed to SetAuthor) and GetDoc
' 2.1 MNV 10Jan07:
'-Changed AgentLoggerVersion from text to number.
'-Removed SetAuthor, made Author a parameter to New.
'-Removed LogDocumentError and LogFieldError (moved to Relational Data Services)
'-Removed LogInstanceDetails, contents moved to New (was only also used in LogFieldError), also removed related properties
'-Removed AddLogMessageItem, renamed AddColorLogMessageItem to replace it, added the extra Nothing parrameter to the appropriate calls
'-Removed GetDoc, made LogDocument public.
'-Removed HasMessages property, New adds a message so not needed.
'-removed LogStats, do it always in Store, also removed RecordingStats property.
'2.2 JBC fixed AddLink so it can show Views and Databases

Class AgentLogger
	Public LogDocument As NotesDocument
	Private LogSession As NotesSession
	Private LogDatabase As NotesDatabase
	Private LogMessages As NotesRichTextItem
	Private DefaultTextStyle As NotesRichTextStyle
	Public CountDocsRead As Long
	Public CountDocsAdded As Long
	Public CountDocsModified As Long
	Public CountDocsDeleted As Long
	
	'This is the class' constructor
	Public Sub New( Session As NotesSession, Author As String, Description As String, Temporary As Boolean )
		'Initialize variables
		Set LogSession = Session
		CountDocsRead = 0
		CountDocsAdded = 0
		CountDocsModified = 0
		CountDocsDeleted = 0
		
		'Determine server to use. This gets around a bug introduced in domino 6
		Dim Server As String
		If Session.IsOnServer Then
			Server = ""
		Else
			Server = Session.CurrentDatabase.Server
		End If
		
		'Open HS Agent Log database using it's replica id
		Set LogDatabase = New NotesDatabase( "", "" )
		If LogDatabase.OpenByReplicaID( Server, HSAgentLogReplicaID ) = False Then
			Error 2001, "Could not locate HealthSpace agent log database (" + HSAgentLogReplicaID + ")"
		End If
		
		'Create a new document representing an agent run
		Set LogDocument = LogDatabase.CreateDocument
		LogDocument.Version = AgentLoggerVersion
		LogDocument.Form = "AgentLog"
		LogDocument.Status = "Running"
		LogDocument.StartTime = Now
		
		'Prepare and log instance details about the agent run
		Dim AgentDatabase As NotesDatabase
		Set AgentDatabase = LogSession.CurrentDatabase
		LogDocument.Username = LogSession.Username
		LogDocument.Database = AgentDatabase.Title
		LogDocument.DatabaseFile = AgentDatabase.FileName
		LogDocument.DatabasePath = AgentDatabase.FilePath
		LogDocument.Server = AgentDatabase.Server
		
		Dim Agent As NotesAgent
		Set Agent = LogSession.CurrentAgent
		LogDocument.Agent = Agent.Name
		LogDocument.AgentOwner = Agent.Owner
		
		'Log additional information about the agent
		LogDocument.AgentDescription = Description
		LogDocument.AgentAuthor = Author
		If Temporary = True Then
			LogDocument.Temporary = True
		Else
			LogDocument.Temporary = False
		End If
		
		'Prepare log document style
		Set LogMessages = New NotesRichTextItem( LogDocument, "Output" )
		Set DefaultTextStyle = Session.CreateRichTextStyle()
		Dim Color As NotesColorObject
		Set Color = LogSession.CreateColorObject()
		Call Color.SetRGB( 0, 0, 255 )
		DefaultTextStyle.NotesColor = Color.NotesColor
		DefaultTextStyle.NotesFont = 4
		DefaultTextStyle.FontSize = 10
		Call LogMessages.AppendStyle( DefaultTextStyle )
		
		'Log initial message
		Call AddLogMessageItem( "Agent started.", Nothing )
		
		'Save initial log details
		Call LogDocument.Save( True, True )
	End Sub
	
	'This is the class' destructor
	Public Sub Delete
		If Not LogDocument Is Nothing Then
			If LogDocument.Status(0) = "Running" Then
				LogDocument.Status = "Failed"
				LogDocument.Error = "Agent was interrupted or terminated."
			End If
			Call LogDocument.Save( True,True )
		End If
	End Sub
	
	'Records a runtime message to the agent log
	Public Sub Log( Message As String, Save As Boolean )
		Call AddLogMessageItem( Message, Nothing )
		If Save = True Then
			Call Store
		End If
	End Sub
	
	'Records a runtime warning message to the agent log
	Public Sub LogWarning( Message As String, Save As Boolean )
		If Not LogDocument Is Nothing Then
			'Record warning in special document field
			LogDocument.HasWarning = "True"
			
			'Prepare color for warning message
			Dim Color As NotesColorObject
			Set Color = LogSession.CreateColorObject( )
			Call Color.SetRGB( 255, 0, 0 )
			
			'Record warning message
			Call AddLogMessageItem( Message, Color )
			If Save = True Then
				Call Store
			End If
		End If
	End Sub
	
	'Record that the agent encountered an unhandled error
	Public Sub Error
		If Not LogDocument Is Nothing Then
			'Log final message
			Dim Color As NotesColorObject
			Set Color = LogSession.CreateColorObject( )
			Call Color.SetRGB( 255, 0, 0 )
			Call AddLogMessageItem( "Agent failed (with internal notes error).", Color )
			
			'Log error data
			LogDocument.EndTime = Now
			LogDocument.Status = "Failed"
			LogDocument.Error = Error
			LogDocument.ErrorCode = Err
			LogDocument.ErrorLine = Erl
			Call Store
		End If
	End Sub
	
	'Record that the agent completed successfully
	Public Sub Success
		If Not LogDocument Is Nothing Then
			If( LogDocument.HasItem( "HasWarning" ) ) Then
				Call AddLogMessageItem( "Agent completed successfully (with warnings).", Nothing )
			Else
				Call AddLogMessageItem( "Agent completed successfully.", Nothing )
			End If
			LogDocument.EndTime = Now
			LogDocument.Status = "Completed"
			Call Store
		End If
	End Sub
	
	'Record that the agent encountered a handled error
	Public Sub Failure( Message As String )
		If Not LogDocument Is Nothing Then
			'Log final message
			Dim Color As NotesColorObject
			Set Color = LogSession.CreateColorObject( )
			Call Color.SetRGB( 255, 0, 0 )
			Call AddLogMessageItem( "Agent failed (with custom error).", Color )
			
			'Log error data
			LogDocument.EndTime = Now
			LogDocument.Status = "Failed"
			LogDocument.Error = "(CUSTOM) " + Message
			Call Store
		End If
	End Sub
	
	'Adds a new coloured line of text to the rich text log
	Private Sub AddLogMessageItem( Message As String, Color As NotesColorObject )
		If Not LogMessages Is Nothing Then
			'start a new line
			Call LogMessages.AddNewline(1)
			
			'If there is no message to display, we don't need to continue processing
			If Len( Message ) > 0 Then
				'Prepare the text style
				Dim TextStyle As NotesRichTextStyle
				If Color Is Nothing Then
					Set TextStyle = DefaultTextStyle
				Else
					Set TextStyle = LogSession.CreateRichTextStyle()
					TextStyle.NotesColor = Color.NotesColor
				End If
				
				'Add the text to the log file
				Call LogMessages.AppendStyle( TextStyle )
				Call LogMessages.AppendText( Format(Now, "hh:nn:ss") & " " & Message )
			End If
		End If
	End Sub
	
	'Adds a document link to the agent log
	Public Sub AddLink( Document As Variant )
		If Not LogMessages Is Nothing Then
			'Catch exceptions here - an error will be thrown if the document is in a database
			'without a default view!
			On Error Resume Next
			Call LogMessages.AppendDocLink( Document, "" )
			On Error Goto 0
		End If
	End Sub
	
	'Increment read document count
	Public Sub IncrementDocumentsRead
		CountDocsRead = CountDocsRead + 1
	End Sub
	
	'Increment added document count
	Public Sub IncrementDocumentsAdded
		CountDocsAdded = CountDocsAdded + 1
	End Sub
	
	'Increment modified document count
	Public Sub IncrementDocumentsModified
		CountDocsModified = CountDocsModified + 1
	End Sub
	
	'Increment deleted document count
	Public Sub IncrementDocumentsDeleted
		CountDocsDeleted = CountDocsDeleted + 1
	End Sub
	
	'Calculates log statistics and saves the log file to the database
	Private Sub Store
		LogDocument.DocsModified = CountDocsModified
		LogDocument.DocsAdded = CountDocsAdded
		LogDocument.DocsDeleted = CountDocsDeleted
		LogDocument.DocsRead = CountDocsRead
		Call LogDocument.Save( True,True )
	End Sub
End Class
'++LotusScript Development Environment:2:1:AgentInfo:1:8
Function AgentInfo(db As notesdatabase, session As notessession) As notesagent
	Dim agentdb As notesdatabase
	Dim agentdoc As notesdocument
	Dim opendb As Variant
	Dim curragent As notesagent
	Dim thedate As notesdatetime
	
	Set db = session.currentdatabase
	Set curragent = session.currentagent
	Set thedate = New notesdatetime(Now())
	
	If db.CurrentAccessLevel >= ACLLEVEL_DESIGNER Or session.username = "HS Agent/Service/HealthSpace" Then
		Set agentdb = New notesdatabase("","")
		opendb  = agentdb.OpenByReplicaID( db.server, "8825694D001E6577" )
		If opendb = False Then
			opendb  = agentdb.OpenByReplicaID( "Walrus/HealthSpace", "8825694D001E6577" )
			If opendb = True Then
				Set agentdoc = agentdb.createdocument
				agentdoc.form = "Info"
				agentdoc.agentname = curragent.name
				agentdoc.creator = curragent.CommonOwner
				agentdoc.servername = db.Server
				agentdoc.dbname = db.Title
				agentdoc.dbreplicaid = db.replicaid
				agentdoc.dbfilepath = db.filepath
				agentdoc.result = "Success"
				agentdoc.resultdate = thedate.lslocaltime
				agentdoc.comments = "This is really a wonderful agent!"
				agentdoc.enddate = thedate.lslocaltime
				Call agentdoc.save(True,True)
			End If
		Else
			Set agentdoc = agentdb.createdocument
			agentdoc.form = "Info"
			agentdoc.agentname = curragent.name
			agentdoc.creator = curragent.CommonOwner
			agentdoc.servername = db.Server
			agentdoc.dbname = db.Title
			agentdoc.dbreplicaid = db.replicaid
			agentdoc.dbfilepath = db.filepath
			agentdoc.result = "Success"
			agentdoc.resultdate = thedate.lslocaltime
			agentdoc.comments = "This is really a wonderful agent!"
			agentdoc.enddate = thedate.lslocaltime
			Call agentdoc.save(True,True)
		End If
	Else
		Dim memo As notesdocument
		Dim rtitem As notesrichtextitem
		Set memo = db.createdocument
		Set rtitem = New notesrichtextitem(memo, "Body")
		memo.form = "Memo"
		memo.subject = "Agent Error"
		rtitem.appendtext ("You can't run this. You are not cool enough!")
		rtitem.appendtext(Chr(13))
		rtitem.appendtext(session.username)
		rtitem.appendtext(Chr(13))
		rtitem.appendtext(db.title)
		Call memo.send(False,"Mike Vogt")
	End If	'access granted/not granted
End Function