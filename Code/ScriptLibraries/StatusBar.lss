'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class LNProgressbar
Declare Sub example
Declare Function InitDetailed( DetailedProgressBar As LNProgressBar, TotalCount As Long, _
SmoothEst As Variant, UseStdDev As Variant, UseCushion As Variant ) As Variant
Declare Sub incDetailed( DetailedProgressBar As LNProgressBar )
Declare Function nicetimeformat( seconds As Long ) As String
Declare Sub exampleDetailed( db As notesdatabase )
Declare Sub incDetailedCustom( DetailedProgressBar As LNProgressBar, Action As String, ObjType As String )

'++LotusScript Development Environment:2:5:(Declarations):0:10
Declare Public Function NEMProgressBegin Lib "nnotesws.dll" ( Byval wFlags As Integer ) As Long 
Declare Public Sub NEMProgressDeltaPos Lib "nnotesws.dll" ( Byval hwnd As Long, Byval dwIncrement As Long )
Declare Public Sub NEMProgressEnd Lib "nnotesws.dll" ( Byval hwnd As Long )
Declare Public Sub NEMProgressSetBarPos Lib "nnotesws.dll" ( Byval hwnd As Long, Byval dwPos As Long)
Declare Public Sub NEMProgressSetBarRange Lib "nnotesws.dll" ( Byval hwnd As Long, Byval dwMax As Long )
Declare Public Sub NEMProgressSetText Lib "nnotesws.dll" ( Byval hwnd As Long, Byval pcszLine1 As String, Byval pcszLine2 As String )

Const NPB_TWOLINE = 3
Const NPB_ONELINE = 2

Dim debugger As Variant
Dim total As Long

Public Class LNProgressbar
	
	hwnd As Long
	
	Sub New(SecondLineVisible As Integer)
		
		Dim resp As Variant
		Dim session As New NotesSession
		Dim db As NotesDatabase
		
		Set db = session.CurrentDatabase
		
		' If this user is a designer and the debugger is running we want this class to know about it
		If db.CurrentAccessLevel >= ACLLEVEL_DESIGNER  Then
			' Check to see if the debugger is running
			resp = Messagebox("Is the debugger running?",4, "Progress bar")
		Else
			resp = 7
		End If
		
		If resp = 7 Then
			
			debugger = False
			'Set-up the progress bar on the screen 
			If SecondLineVisible Then
				hwnd = NEMProgressBegin(NPB_TWOLINE) 
			Else
				hwnd = NEMProgressBegin(NPB_ONELINE)
			End If
		Else
			debugger = True
		End If
		
	End Sub
	
	
	Sub SetText(FirstLineText As String,SecondLineText As String)
		If debugger = False Then
			'Display the text in progress bar 		
			NemProgressSetText hwnd, FirstLineTExt,SecondLineText 
		End If
	End Sub
	
	Sub SetProgressPos(Progresspos As Long)
		If debugger = False Then
			NEMProgressSetBarPos hwnd, ProgressPos 
		Else
			Print "Processing document " & Format(Progresspos, "General Number")  & " of " & Format(total, "General Number") & ".  " & Format(Progresspos / total,"Percent")  & " complete.  " & Format(total - Progresspos, "General Number") & " left to process."
		End If
	End Sub
	
	Sub SetProgressRange(ProgressMaxElements As Long)
		'Set-up the max elements in the progress bar, if you have 
		'a list with 230 elements then set the MAX to 230 elements.
		'For every element you proceed increase the SetProgressPos 
		'by one to reached 230 
		If debugger = False Then	
			NEMProgressSetBarRange hwnd, ProgressMaxElements
		Else
			total = ProgressMaxElements		
		End If
		
	End Sub
	
	Sub DeltaPos(DPos As Long)
		If debugger = False Then
			'This function adds the number in DPOS to the current ProgressPos
			NEMProgressDeltaPos hwnd, DPos
		End If
	End Sub 
	
	Sub Delete
		If debugger = False Then
			'Terminate the progress bar on the screen 
			NEMProgressEnd hwnd
		End If
	End Sub
	
End Class

'globals for xxxxDetailedfunctions
'some of these are poorly named
Dim Detaileddowncounter As Long
Dim Detailedupcounter As Long
Dim Detailedstarttime As Long
Dim Detailedcushion As Integer
Dim DetailedEstTot As Long
Dim Detaileddispavgtime As Single
Dim Detailedtotdif As Single
Dim Detailedlastavg As Single
Dim DetailedSmoothEst As Variant
Dim DetailedUseStdDev As Variant


'++LotusScript Development Environment:2:2:example:1:8
Sub example
	Dim ProgressBar As New LNProgressBar(True)
	Dim Counter As Long
	
	Call ProgressBar.SetText("This is line one","This is line two")
	
	'We set the range to 200 elements
	Call ProgressBar.SetProgressRange(1000)
	
	For Counter = 1 To 1000
		'we process the elements
		Call ProgressBar.SetProgressPos( Counter )
	Next
	
	'Terminate the progress bar
	Delete ProgressBar
End Sub
'++LotusScript Development Environment:2:1:InitDetailed:2:8
Function InitDetailed( DetailedProgressBar As LNProgressBar, TotalCount As Long, _
SmoothEst As Variant, UseStdDev As Variant, UseCushion As Variant ) As Variant
	If DetailedProgressBar Is Nothing Then
		Set DetailedProgressBar = New LNProgressBar( True )
	End If
	Detaileddowncounter = TotalCount 'counter will count down how many documents are left
	Call DetailedProgressBar.SetProgressRange( Detaileddowncounter )
	If TotalCount = 0 Then
		Call DetailedProgressBar.SetText( "Searching for Documents ..." & Detaileddowncounter, "" )
	Else
		Call DetailedProgressBar.SetText( "Processing Documents ..." & Detaileddowncounter, "" )
	End If
	Detailedstarttime = Hour( Time$ ) * 3600 + Minute( Time$ ) * 60 + Second(Time$)'time now
	Detailedupcounter = 0
	If UseCushion And (TotalCount > 500) Then 'cushioning is silly with small collections
		Detailedcushion = 1
	Else
		Detailedcushion = -1
	End If
	DetailedSmoothEst = SmoothEst And (TotalCount > 100) 'silly with small collections
	DetailedUseStdDev = UseStdDev And (TotalCount > 100) 'silly with small collections
	InitDetailed = debugger
End Function


'++LotusScript Development Environment:2:2:incDetailed:1:8
Sub incDetailed( DetailedProgressBar As LNProgressBar )
	incDetailedCustom DetailedProgressBar, "Processing","Documents" 
End Sub

'++LotusScript Development Environment:2:1:nicetimeformat:1:8
Function nicetimeformat( seconds As Long ) As String
	'nicetimeformat = Format$( seconds, "nn:ss" )
	'if that doesnt work, this will...
	nicetimeformat = Format$( Int(seconds / 60), "00" ) & ":" & Format$( seconds Mod 60, "00" )
End Function
'++LotusScript Development Environment:2:2:exampleDetailed:1:8
Sub exampleDetailed( db As notesdatabase )
	Exit Sub 'this is incase Mr. Vogt tries to call this sub
	Dim view As notesview
	Dim doc As notesdocument
	Dim ProgressBar As LNProgressBar
	'Dim dbg As Variant 'optional
	
	InitDetailed ProgressBar, 0, False, False, False 
	Set view = db.getview( "Untitled" )
	Set doc = view.getfirstdocument
	InitDetailed ProgressBar, view.allentries.count, True, True, False 
	'dbg = InitDetailed( ProgressBar, view.allentries.count, True, True, False )
	'If dbg Then
	'	Msgbox "OK, Using Print instead of Window"
	'Else
	'	On Error Goto heyheyhey
	'End If
	
	While Not doc Is Nothing
		'do something
		'done something
		Set doc = view.getnextdocument( doc )
		Call IncDetailed( ProgressBar )
	Wend
	Delete ProgressBar
	
'	Exit Sub
'heyheyhey:
'	Msgbox "bad stuff happened"
'	Resume Next
	
End Sub
'++LotusScript Development Environment:2:2:incDetailedCustom:1:8
Sub incDetailedCustom( DetailedProgressBar As LNProgressBar, Action As String, ObjType As String )
	
	Dim endtime As Long
	Dim totaltime As Long
	Dim totaltotaltime As Long
	Dim AvgTime As Single
	Dim avgdif As Single
	Dim disptotal As Long
	
	Detailedupcounter = Detailedupcounter + 1
	Detaileddowncounter = Detaileddowncounter - 1  'counts down how many documents need to be processed
	endtime = Hour( Time$ ) * 3600 + Minute( Time$ ) * 60 + Second(Time$)'time now
	totaltotaltime = (endtime - Detailedstarttime) 'figures out how long it took to get this far
	If (Detailedcushion < 0) Or (Detailedupcounter Mod Detailedcushion = 0) Then
		avgtime = totaltotaltime / Detailedupcounter 'how long it usually takes to get through the loop
		If DetailedUseStdDev And Detailedupcounter > 1 Then	
			Detailedtotdif = Detailedtotdif + Abs(Detailedlastavg - avgtime)
			avgdif = Detailedtotdif / (Detailedupcounter - 1)
		End If
		If Abs(Detailedlastavg - avgtime) <= avgdif Or Not DetailedUseStdDev Then 'a "normal" difference
			Detaileddispavgtime = avgtime
		End If
		Detailedlastavg = avgtime
		totaltime = Clng( Detaileddispavgtime * Detaileddowncounter )
		dispTotal = totaltotaltime + totaltime
		If Abs(dispTotal - DetailedEstTot) > 10 Or (DetailedEstTot - TotalTotalTime) < 2 Or Not DetailedSmoothEst Then 'significant change in estimate
			DetailedEstTot = totaltotaltime + totaltime
		End If
		'adjust cushion for more frequent updates at either end
		If Detailedcushion > -1 Then
			Detailedcushion = ((Detailedupcounter + Detaileddowncounter) - Abs( Detaileddowncounter - Detailedupcounter )) / 100
			If (Detailedupcounter < 50) Or Detailedcushion = 0 Or (Detaileddowncounter < 50) Then Detailedcushion = 1
		End If
	End If 'cushion				
	
	Call DetailedProgressBar.SetProgressPos( Detailedupcounter ) 'Update the progress bar
'	Call DetailedProgressBar.SetText( "Processing " & Detaileddowncounter & " Documents ....", _ 
	Call DetailedProgressBar.SetText( Action & " " & Detaileddowncounter & " " & ObjType & " ....", _ 
	"Elapsed: " & nicetimeformat( TotalTotaltime ) & _ 
	"  Remaining: " & nicetimeformat( DetailedEstTot - TotalTotaltime ) &_ 
	"  Est. Total: " & nicetimeformat( DetailedEstTot) ) 
End Sub