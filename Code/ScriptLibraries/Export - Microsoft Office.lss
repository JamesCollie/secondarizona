'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare 


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub DocsToExcel(docs As NotesDocumentCollection, file As String, OpenInUI As Variant)  
Declare Function NotesToRGBColor(Color As Integer) As Long
Declare Sub ViewToExcel(db As NotesDatabase, viewName As String, viewTitle As String, file As String, OpenInUI As Variant)  
Declare Function ArrayToLines(ColumnArray As Variant) As String
Declare Sub ViewToExcel2(db As NotesDatabase, viewName As String, viewTitle As String, file As String, OpenInUI As Variant)
Declare Function ViewToExcel3( db As NotesDatabase, viewName As String, file As String ) As String
Declare Function FixLineBreaks(BadString As String) As String

'++LotusScript Development Environment:2:5:(Declarations):0:2

'++LotusScript Development Environment:2:2:DocsToExcel:1:8
Sub DocsToExcel(docs As NotesDocumentCollection, file As String, OpenInUI As Variant)  
	Dim Handle As Variant ' excel export object
	Dim Wbook As Variant ' object workbook
	Dim WSheet As Variant ' workbook sheets
	Dim doc As NotesDocument 'current document
	Dim NItem As NotesItem
	Dim i As Integer
	Dim iRow As Integer
	Dim iCol As Integer	
	Dim iLastCol As Integer
	Dim Columns List As Integer
	Dim sFieldName As String
	Dim iDocCount As Integer
	Dim vDate As Variant
	
	On Error Resume Next
	Set Handle = CreateObject("Excel.Application")  ' link to excel
	If Err <> 0 Then 
		Messagebox "Error connecting to Microsoft Excel. Please verify that it is installed correctly.", 0+48,"Error"
		Exit Sub
	End If
	On Error Goto 0 
	Set Wbook=Handle.Workbooks.Add ' add a workbook to the object
	Set WSheet=Wbook.Worksheets(1) ' and a worksheet to the workbook
	
	'Form should always be first column
	'Column 1 = UNID
	Wsheet.Cells(1,1).Value = "UNID"	
	'Column 2 = FORM
	Columns("form") = 2
	Wsheet.Cells(1,2).Value = "Form"	
	
	Set doc = docs.GetFirstDocument
	If doc Is Nothing Then
		'Error
	End If
	
	iDocCount = Docs.Count
	iRow = 1
	While Not doc Is Nothing
		iLastCol = 2
		Print "Exporting document " + Cstr(iRow) + " of " + Cstr(iDocCount) ' display count in status bar		
		iRow = iRow + 1
		'Export UNID
		Wsheet.Cells(iRow,1).Value = Doc.UniversalID
		'Fields 
		For i = Lbound(Doc.Items) To Ubound(Doc.Items)
			'Find correct column for item
			sFieldName = Doc.Items(i).Name
			If Iselement(Columns(Lcase(sFieldName))) Then
				iCol = Columns(Lcase(sFieldName))
			Else
				iLastCol = iLastCol + 1
				If iLastCol > 255 And Cint(Handle.Version) <= 11 Then
					iCol = -1
				Else
					If iLastCol > 16384  Then iCol = -1
					iCol = iLastCol
					Columns(Lcase(sFieldName)) = iLastCol
					Wsheet.Cells(1,iCol).Value = sFieldName									
				End If
			End If			
			
			'Export data to column
			Set NItem = Doc.Items(i)
			'This section of code formats dates for use in Excel
			
			If NItem.Type = 1024 And Isdate(NItem.Text) Then
				If Isdate(NItem.Text) Then
					Set vDate = NItem.Datetimevalue
					If Not vDate Is Nothing And vDate.DateOnly <> "" Then
						'Check to see if the document date is correct before exporting
						If Cvdate(Format(vDate.DateOnly,"Short Date")) >= Cvdate(Format("1/1/1900","Short Date")) Then 
							If iCol >= 0 Then Wsheet.Cells(iRow,iCol).Value = Cvdate(Format(NItem.Text,"Short Date"))
						Else
							Messagebox "Document ID """ & Doc.DocumentID(0) & """, field """ & sfieldname & _
							""" contains the value """ & vDate.dateonly & """. Please correct the date before " & _
							" exporting documents to Excel.", 16 
							Wbook.Close(False)
							Handle.Quit
							Exit Sub
						End If
					Else
						If iCol >= 0 Then Wsheet.Cells(iRow,iCol).Value = Trim(FixLineBreaks(NItem.Text))
					End If
				Else
					If iCol >= 0 Then Wsheet.Cells(iRow,iCol).Value = Trim(FixLineBreaks(NItem.Text))
				End If
			Else
				If iCol >= 0 Then Wsheet.Cells(iRow,iCol).Value = Trim(FixLineBreaks(NItem.Text))
			End If
		Next
		Set doc = docs.GetNextDocument(doc)
	Wend
	
	If Cint(Handle.Version) <=11 Then
		If iLastCol > 255 Then 
			iLastCol = 255
			Messagebox "Microsoft Excel only supports 255 columns. Certain fields (document data) cannot be copied",48,"Export Warning"		
		End If
	Else
		If iLastCol > 16384 Then 
			iLastCol = 16384
			Messagebox "Microsoft Excel only supports 16384columns. Certain fields (document data) cannot be copied",48,"Export Warning"		
		End If
	End If
	Wsheet.Cells.ColumnWidth = 10
	Wsheet.Cells.WrapText = False
	
	Wsheet.Rows(1).Font.Name="Arial"
	Wsheet.Rows(1).Font.Color=NotesToRGBColor(1)
	Wsheet.Rows(1).Interior.Color=NotesToRGBColor(14)	
	Wsheet.Rows(1).Font.Bold=True ' we just set the titles, now make them larger and bold
	Wsheet.Rows(1).Font.Size=11 ' no purpose other than looks	
	
	If OpenInUI = True Then
		Handle.Visible = True
	Else
		Wbook.SaveAs(file) 		
		Wbook.close 
		Handle.Quit
	End If
	
	Set Wsheet=Nothing
	Set Wbook=Nothing
	Set Handle=Nothing
End Sub

'++LotusScript Development Environment:2:1:NotesToRGBColor:1:8
Function NotesToRGBColor(Color As Integer) As Long
	'Don't use hex! Hex is buggy! Stupid Notes
	Select Case Color 
	Case 0	'Black
		NotesToRGBColor = 0
	Case 1	'White
		NotesToRGBColor = 16777215		
	Case 2	'Red		
		NotesToRGBColor = 255
	Case 3	'Green
		NotesToRGBColor = 65280
	Case 4	'Blue
		NotesToRGBColor = 16711680
	Case 5	'Magenta
		NotesToRGBColor = 16711935
	Case 6	'Yellow
		NotesToRGBColor = 65535
	Case 7	'Cyan
		NotesToRGBColor = 16776960		
	Case 8	'Dark Red
		NotesToRGBColor = 128
	Case 9	'Dark Green
		NotesToRGBColor = 32768
	Case 10	'Dark Blue
		NotesToRGBColor = 8388608
	Case 11	'Dark Magenta
		NotesToRGBColor = 8388736
	Case 12	'Dark Yellow
		NotesToRGBColor = 32896
	Case 13	'Dark Cyan
		NotesToRGBColor = 8421376		
	Case 14	'Gray
		NotesToRGBColor = 8421504
	Case 15	'Light Gray
		NotesToRGBColor = 12632256
	Case Else
		NotesToRGBColor = 0
	End Select
End Function


'++LotusScript Development Environment:2:2:ViewToExcel:1:8
Sub ViewToExcel(db As NotesDatabase, viewName As String, viewTitle As String, file As String, OpenInUI As Variant)  
	
	'viewtitle is never used!
	
	Dim ses As New NotesSession
	Dim ExcelApp As Variant					'Excel application object
	Dim Wbook As Variant					'Excel workbook object
	Dim WSheet As Variant					'Excel workbook sheet	
	Dim Nav As NotesViewNavigator ' to sort through those docs, we use a navigator	
	Dim View As Notesview	
	Dim ViewEntry As NotesViewEntry
	Dim ViewColumns As Variant	
	Dim iUpperColumn As Integer			'ubound column for entry	
	Dim iTotalViewColumns As Integer		'total columns in view
	Dim iTotalExcelColumns As Integer	'total columns in spreadsheet	
	Dim iTemp As Integer						'temporary integer cache
	Dim sTemp As String						'temporary string cache
	Dim i,k As Integer							'looping variables
	Dim iStatusCounter As Integer			'use this to only print status every so often (faster)
	Dim iCurRow,iCurCol As Integer		'current column & row in spreadsheet
	Dim sPadding As String					'text padding for response entries	
	Dim sColumnValue As String			'current column value
	
	'Constants for view type
	Const Hidden = 0
	Const Shown = 1
	Const Category = 2
	Const Response = 3
	
	If Not ses.IsOnServer Then Print "Preparing to export data to Microsoft Excel..."	
	
	'Get View and Navigator
	Set View = DB.GetView(ViewName) 'Get view we will be processing
	Set Nav = View.CreateViewNav 'Create view navigator for processing		
	ViewColumns = View.Columns 'Place in a variable for performance reasons
	
	'Connect to Excel
	On Error Resume Next
	Set ExcelApp = CreateObject("Excel.Application")  ' link to excel
	If Err <> 0 Then 
		If Not ses.IsOnServer Then Messagebox "Error connecting to Microsoft Excel. Please verify that it is installed correctly.", 0+48,"Error"
		Exit Sub
	End If
	On Error Goto 0 
	Set Wbook = ExcelApp.Workbooks.Add ' add a workbook to the object
	Set WSheet = Wbook.Worksheets(1) ' and a worksheet to the workbook
	
	'Get View Information
	iTotalViewColumns = Ubound(view.Columns) 'total columns in view	
'	If iTotalViewColumns > 255 Then 
'		iTotalViewColumns = 255
'		Messagebox "Microsoft Excel only supports 255 columns. Some view data cannot be copied",48,"Export Warning"
'	End If
	Redim ViewColumnInfo(0 To iTotalViewColumns) As Integer 'information about view column's type
	
	'Get View Column Types and set column style
	k=0
	For i = 0 To iTotalViewColumns
		'Get Column Type
		If (view.Columns(i).IsHidden) Or (view.Columns(i).IsIcon) Then			
			ViewColumnInfo(i) = Hidden			'Don't show hidden or icon columns
		Elseif (view.Columns(i).IsCategory) Then
			ViewColumnInfo(i) = Category		'Categorized column
		Elseif (view.Columns(i).IsResponse) Then
			ViewColumnInfo(i) = Response		'Show responses only column
		Else
			ViewColumnInfo(i) = Shown			'Normal column
		End If
		
		If ViewColumnInfo(i) <> Hidden Then 
			'Count visible columns (columns in destination spreadsheet)
			k = k + 1
			
			'Set Column Title	
			If ViewColumnInfo(i) = Shown Then
				Wsheet.Cells(1,k).Value = ViewColumns(i).Title
			Else
				Wsheet.Cells(1,k).Value= ""
			End If
			
			'Set Default Column Font, Style, Size, and Color
			Wsheet.Columns(k).Font.Name = "Arial"			
			Wsheet.Columns(k).Font.Size = 10
			Wsheet.Columns(k).Font.Bold = False			
			Wsheet.Columns(k).Font.Italic = False			
			Wsheet.Columns(k).Font.Underline = False			
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(0)
			
			'Set Custom Column Font Style
			iTemp = view.Columns(i).FontStyle
			If (iTemp And 1) = 1 Then Wsheet.Columns(k).Font.Bold = True
			If (iTemp And 2) = 2 Then Wsheet.Columns(k).Font.Italic = True		
			If (iTemp And 4) = 4 Then Wsheet.Columns(k).Font.Underline = True
			Wsheet.Columns(k).Font.Size = View.Columns(i).FontPointSize
			sTemp = View.Columns(i).FontFace
			If sTemp <> "Default Sans Serif" Then Wsheet.Columns(k).Font.Name = View.Columns(i).FontFace
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(View.Columns(i).FontColor)			
		End If
	Next
	iTotalExcelColumns = k
	
	'Set header row style
	Wsheet.Rows(1).Font.Name = "Arial"
	Wsheet.Rows(1).Font.Color = NotesToRGBColor(1)
	Wsheet.Rows(1).Interior.Color = NotesToRGBColor(14)	
	Wsheet.Rows(1).Font.Bold = True
	Wsheet.Rows(1).Font.Size = 11
	
	'Export view entries/rows to spreadsheet
	If Not ses.IsOnServer Then Print "Exporting data to Microsoft Excel spreadsheet..."		
	iStatusCounter = 1
	iCurRow = 2	
	Set ViewEntry = Nav.GetFirst 'Get the first item in the view
	While Not (ViewEntry Is Nothing)
		
		'Check number of columnvalues for current entry (may be less for catagorized columns)
		iTemp = Ubound(ViewEntry.ColumnValues)
		If iTemp < iTotalViewColumns Then 
			iUpperColumn = iTemp
		Else
			iUpperColumn = iTotalViewColumns
		End If
		
		iCurCol = 0
		For i = 0 To iUpperColumn
			If ViewColumnInfo(i) <> Hidden Then 'Only process visible columns				
				
				iCurCol = iCurCol + 1
				sColumnValue = ArrayToLines(ViewEntry.ColumnValues(i))				
				
				'Default Value
				Wsheet.Cells(iCurRow,iCurCol).Value=""				
				
				iTemp = ViewEntry.ColumnIndentLevel
				If (iTemp > 0) Then
					'Entry is a response document
					If ViewColumnInfo(i) = Response Then 'Only show response document entries in a 'response' column						
						sPadding = ""
						For k = 1 To iTemp
							sPadding = sPadding + "      "
						Next
						Wsheet.Cells(iCurRow,iCurCol).Value = sPadding + sColumnValue
					End If
				Elseif (ViewEntry.IsCategory) Then
					'Entry is a category
					If ViewColumnInfo(i) = Category Then 'Only show category entries in a 'catagory' column
						Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
					End If
				Else
					'Normal column
					If ViewColumnInfo(i) = Shown Then Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
				End If
			End If										
		Next			
		
		iCurRow = iCurRow + 1
		
		iStatusCounter = iStatusCounter + 1
		If iStatusCounter = 10 Then
			If Not ses.IsOnServer Then Print "Exporting data to Microsoft Excel spreadsheet... (" + Cstr(iCurRow-1) + " rows processed)"
			iStatusCounter = 0
		End If
		
		'Perform error handling here in case of nasty view errors like "not in index"
		Err = 0
		On Error Resume Next
		Set ViewEntry = Nav.GetNext(ViewEntry)
		If Err <> 0 Then 
			If Not ses.IsOnServer Then Messagebox "Error selecting the next row in the view. We were at row " & iCurRow & " and the remaining rows will be ignored.", 0+48,"Error"
			Set ViewEntry = Nothing
		End If
		On Error Goto 0
	Wend		
	
	If Not ses.IsOnServer Then Print "Microsoft Excel export complete (" + Cstr(iCurRow-1) + " rows processed in total)"		
	
	'Set column widths
	i = 0
	For k = 0 To iTotalViewColumns
		If ViewColumnInfo(k) <> Hidden Then
			i = i + 1
			If ViewColumnInfo(k) = Category Then
				Wsheet.Columns(i).ColumnWidth = 2
			Elseif ViewColumnInfo(k) = Response Then			
				Wsheet.Columns(i).ColumnWidth = 0.1			
			Else
				Wsheet.Columns(i).Autofit
			End If
		End If
	Next
	
	'Open Spreadsheet in UI if needed
	If OpenInUI = True Then
		ExcelApp.Visible = True
	Else
		Wbook.SaveAs(file) 		
		Wbook.close 
		ExcelApp.Quit
	End If
	
	Set Wsheet = Nothing
	Set Wbook = Nothing
	Set ExcelApp = Nothing
	
End Sub

'++LotusScript Development Environment:2:1:ArrayToLines:1:8
Function ArrayToLines(ColumnArray As Variant) As String
	Dim i As Integer
	Dim iL As Integer
	Dim s As String
	
	s = ""
	If Isarray(ColumnArray) Then
		iL = Lbound(ColumnArray) 
		For i = iL To Ubound(ColumnArray) 
			If i > iL Then
				s = ColumnArray(i) + Chr(10)
			Else
				s = ColumnArray(i)
			End If
		Next
	Else
		s = ColumnArray
	End If
	ArrayToLines = FixLineBreaks(s)
End Function


'++LotusScript Development Environment:2:2:ViewToExcel2:1:8
Sub ViewToExcel2(db As NotesDatabase, viewName As String, viewTitle As String, file As String, OpenInUI As Variant)
	
	'this version uses selected docs. the original does the whole view
	
	Dim ExcelApp As Variant					'Excel application object
	Dim Wbook As Variant					'Excel workbook object
	Dim WSheet As Variant					'Excel workbook sheet	
	Dim Nav As NotesViewNavigator ' to sort through those docs, we use a navigator	
	Dim View As Notesview	
	Dim ViewEntry As NotesViewEntry
	Dim ViewColumns As Variant	
	Dim iUpperColumn As Integer			'ubound column for entry	
	Dim iTotalViewColumns As Integer		'total columns in view
	Dim iTotalExcelColumns As Integer	'total columns in spreadsheet	
	Dim iTemp As Integer						'temporary integer cache
	Dim sTemp As String						'temporary string cache
	Dim i,k As Integer							'looping variables
	Dim iStatusCounter As Integer			'use this to only print status every so often (faster)
	Dim iCurRow,iCurCol As Integer		'current column & row in spreadsheet
	Dim sPadding As String					'text padding for response entries	
	Dim sColumnValue As String			'current column value
	Dim ExportDocs As NotesDocumentCollection
	Dim ThisDoc As NotesDocument
	Dim NItem As NotesItem
	
	'Constants for view type
	Const Hidden = 0
	Const Shown = 1
	Const Category = 2
	Const Response = 3
	
	Print "Preparing to export data to Microsoft Excel..."	
	
	'Get View and Navigator
	Set View = DB.GetView(ViewName) 'Get view we will be processing
	Set Nav = View.CreateViewNav 'Create view navigator for processing		
	ViewColumns = View.Columns 'Place in a variable for performance reasons
	Set ExportDocs = DB.UnprocessedDocuments
	If ExportDocs.Count < 1 Then
		Print "No documents selected to export to Microsoft Excel."
		Exit Sub
	End If
	
	'Connect to Excel
	On Error Resume Next
	Set ExcelApp = CreateObject("Excel.Application")  ' link to excel
	If Err <> 0 Then 
		Messagebox "Error connecting to Microsoft Excel. Please verify that it is installed correctly.", 0+48,"Error"
		Exit Sub
	End If
	On Error Goto 0 
	Set Wbook = ExcelApp.Workbooks.Add ' add a workbook to the object
	Set WSheet = Wbook.Worksheets(1) ' and a worksheet to the workbook
	
	'Get View Information
	iTotalViewColumns = Ubound(view.Columns) 'total columns in view	
'	If iTotalViewColumns > 255 Then 
'		iTotalViewColumns = 255
'		Messagebox "Microsoft Excel only supports 255 columns. Some view data cannot be copied",48,"Export Warning"
'	End If
	Redim ViewColumnInfo(0 To iTotalViewColumns) As Integer 'information about view column's type
	
	'Get View Column Types and set column style
	k=0
	For i = 0 To iTotalViewColumns
		'Get Column Type
		If (view.Columns(i).IsHidden) Or (view.Columns(i).IsIcon) Then			
			ViewColumnInfo(i) = Hidden			'Don't show hidden or icon columns
		Elseif (view.Columns(i).IsCategory) Then
			ViewColumnInfo(i) = Category		'Categorized column
		Elseif (view.Columns(i).IsResponse) Then
			ViewColumnInfo(i) = Response		'Show responses only column
		Else
			ViewColumnInfo(i) = Shown			'Normal column
		End If
		
		If ViewColumnInfo(i) <> Hidden Then 
			'Count visible columns (columns in destination spreadsheet)
			k = k + 1
			
			'Set Column Title	
			If ViewColumnInfo(i) = Shown Then
				Wsheet.Cells(1,k).Value = ViewColumns(i).Title
			Else
				Wsheet.Cells(1,k).Value= ""
			End If
			
			'Set Default Column Font, Style, Size, and Color
			Wsheet.Columns(k).Font.Name = "Arial"			
			Wsheet.Columns(k).Font.Size = 10
			Wsheet.Columns(k).Font.Bold = False			
			Wsheet.Columns(k).Font.Italic = False			
			Wsheet.Columns(k).Font.Underline = False			
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(0)
			
			'Set Custom Column Font Style
			iTemp = view.Columns(i).FontStyle
			If (iTemp And 1) = 1 Then Wsheet.Columns(k).Font.Bold = True
			If (iTemp And 2) = 2 Then Wsheet.Columns(k).Font.Italic = True		
			If (iTemp And 4) = 4 Then Wsheet.Columns(k).Font.Underline = True
			Wsheet.Columns(k).Font.Size = View.Columns(i).FontPointSize
			sTemp = View.Columns(i).FontFace
			If sTemp <> "Default Sans Serif" Then Wsheet.Columns(k).Font.Name = View.Columns(i).FontFace
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(View.Columns(i).FontColor)			
		End If
	Next
	iTotalExcelColumns = k
	
	'Set header row style
	Wsheet.Rows(1).Font.Name = "Arial"
	Wsheet.Rows(1).Font.Color = NotesToRGBColor(1)
	Wsheet.Rows(1).Interior.Color = NotesToRGBColor(14)	
	Wsheet.Rows(1).Font.Bold = True
	Wsheet.Rows(1).Font.Size = 11
	
	'Export view entries/rows to spreadsheet
	Print "Exporting data to Microsoft Excel spreadsheet..."		
	iStatusCounter = 1
	iCurRow = 2	
'	Set ViewEntry = Nav.GetFirst 'Get the first item in the view
	Set ThisDoc = ExportDocs.GetFirstDocument
	While Not (ThisDoc Is Nothing)
		If ThisDoc.IsValid Then
			Set ViewEntry = Nav.GetEntry(ThisDoc)
			
			If Not ViewEntry Is Nothing Then
				
				'Check number of columnvalues for current entry (may be less for catagorized columns)
				iTemp = Ubound(ViewEntry.ColumnValues)
				If iTemp < iTotalViewColumns Then 
					iUpperColumn = iTemp
				Else
					iUpperColumn = iTotalViewColumns
				End If
				
				iCurCol = 0
				For i = 0 To iUpperColumn
					If ViewColumnInfo(i) <> Hidden Then 'Only process visible columns				
						
						iCurCol = iCurCol + 1
						If Isdate(ViewEntry.ColumnValues(i)) Then
							sColumnValue = ArrayToLines(Format(ViewEntry.ColumnValues(i),"Short Date"))
						Else
							sColumnValue = ArrayToLines(ViewEntry.ColumnValues(i))
						End If
						
						'Default Value
						Wsheet.Cells(iCurRow,iCurCol).Value=""				
						
						iTemp = ViewEntry.ColumnIndentLevel
						If (iTemp > 0) Then
							'Entry is a response document
							If ViewColumnInfo(i) = Response Then 'Only show response document entries in a 'response' column						
								sPadding = ""
								For k = 1 To iTemp
									sPadding = sPadding + "      "
								Next
								Wsheet.Cells(iCurRow,iCurCol).Value = sPadding + sColumnValue
							End If
						Elseif (ViewEntry.IsCategory) Then
							'Entry is a category
							If ViewColumnInfo(i) = Category Then 'Only show category entries in a 'catagory' column
								Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
							End If
						Else
							'Normal column
							If ViewColumnInfo(i) = Shown Then 
								Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
							End If
						End If
					End If										
				Next			
				
				iCurRow = iCurRow + 1
				
				iStatusCounter = iStatusCounter + 1
				If iStatusCounter = 10 Then
					Print "Exporting data to Microsoft Excel spreadsheet... (" + Cstr(iCurRow-1) + " rows processed)"
					iStatusCounter = 0
				End If
				
			End If
		End If
		Set ThisDoc = ExportDocs.GetNextDocument(ThisDoc)
	Wend		
	
	Print "Microsoft Excel export complete (" + Cstr(iCurRow-1) + " rows processed in total)"		
	
	'Set column widths
	i = 0
	For k = 0 To iTotalViewColumns
		If ViewColumnInfo(k) <> Hidden Then
			i = i + 1
			If ViewColumnInfo(k) = Category Then
				Wsheet.Columns(i).ColumnWidth = 2
			Elseif ViewColumnInfo(k) = Response Then			
				Wsheet.Columns(i).ColumnWidth = 0.1			
			Else
				Wsheet.Columns(i).Autofit
			End If
		End If
	Next
	
	'Open Spreadsheet in UI if needed
	If OpenInUI = True Then
		ExcelApp.Visible = True
	Else
		Wbook.SaveAs(file) 		
		Wbook.close 
		ExcelApp.Quit
	End If
	
	Set Wsheet = Nothing
	Set Wbook = Nothing
	Set ExcelApp = Nothing
End Sub

'++LotusScript Development Environment:2:1:ViewToExcel3:1:8
Function ViewToExcel3( db As NotesDatabase, viewName As String, file As String ) As String
	
	'this version tweaked for use in scheduled agents, returns an error string which can be reported in agent log. (this function doesnt know what an agent log is)
	'this version does the whole view, like viewtoexcel not like viewtoexcel2, but returns an error status and never opens in ui.
	'I was hoping to merge all the versions are avoid duplicated code, but I dont have time
	
'	Dim ses As New NotesSession
	Dim ExcelApp As Variant					'Excel application object
	Dim Wbook As Variant					'Excel workbook object
	Dim WSheet As Variant					'Excel workbook sheet	
	Dim Nav As NotesViewNavigator ' to sort through those docs, we use a navigator	
	Dim View As Notesview	
	Dim ViewEntry As NotesViewEntry
	Dim ViewColumns As Variant	
	Dim iUpperColumn As Integer			'ubound column for entry	
	Dim iTotalViewColumns As Integer		'total columns in view
	Dim iTotalExcelColumns As Integer	'total columns in spreadsheet	
	Dim iTemp As Integer						'temporary integer cache
	Dim sTemp As String						'temporary string cache
	Dim i,k As Integer							'looping variables
	Dim iStatusCounter As Integer			'use this to only print status every so often (faster)
	Dim iCurRow,iCurCol As Integer		'current column & row in spreadsheet
	Dim sPadding As String					'text padding for response entries	
	Dim sColumnValue As String			'current column value
	Dim ReturnMsg As String
	
	'Constants for view type
	Const Hidden = 0
	Const Shown = 1
	Const Category = 2
	Const Response = 3
	
	On Error Goto ErrorStuff 
	
'	If Not ses.IsOnServer Then Print "Preparing to export data to Microsoft Excel..."	
	
	'these db errors probably can't happen
	If db Is Nothing Then 
		ReturnMsg = "Error No database passed to Excel Exporter."
		ViewToExcel3 = ReturnMsg 
		Exit Function
	End If
	
	If Not db.IsOpen Then 
		If db.FilePath = "" Then
			ReturnMsg = "Error Empty database passed to Excel Exporter."
			ViewToExcel3 = ReturnMsg 
			Exit Function
		End If
		If Not db.Open( db.Server, db.FilePath ) Then
			ReturnMsg = "Error Could not ot open " & db.FilePath & " on " & db.Server & "."
			ViewToExcel3 = ReturnMsg 
			Exit Function
		End If
	End If
	
	'Get View and Navigator
	Set View = DB.GetView(ViewName) 'Get view we will be processing
	If View Is Nothing Then 
		ReturnMsg = "Error Coule not get " & ViewName & " in " & db.Title & "."
		ViewToExcel3 = ReturnMsg 
		Exit Function
	End If
	Set Nav = View.CreateViewNav 'Create view navigator for processing		
	ViewColumns = View.Columns 'Place in a variable for performance reasons
	
	'Connect to Excel
	On Error Resume Next
	Set ExcelApp = CreateObject("Excel.Application")  ' link to excel
	If Err <> 0 Then 
		ReturnMsg = "Error connecting to Microsoft Excel. Please verify that Excel is installed correctly."
		ViewToExcel3 = ReturnMsg 
		Exit Function
	End If
	On Error Goto ErrorStuff
	Set Wbook = ExcelApp.Workbooks.Add ' add a workbook to the object
	Set WSheet = Wbook.Worksheets(1) ' and a worksheet to the workbook
	
	'Get View Information
	iTotalViewColumns = Ubound(view.Columns) 'total columns in view	
'	If iTotalViewColumns > 255 Then 
'		iTotalViewColumns = 255
'		Messagebox "Microsoft Excel only supports 255 columns. Some view data cannot be copied",48,"Export Warning"
'	End If
	Redim ViewColumnInfo(0 To iTotalViewColumns) As Integer 'information about view column's type
	
	'Get View Column Types and set column style
	k=0
	For i = 0 To iTotalViewColumns
		'Get Column Type
		If (view.Columns(i).IsHidden) Or (view.Columns(i).IsIcon) Then			
			ViewColumnInfo(i) = Hidden			'Don't show hidden or icon columns
		Elseif (view.Columns(i).IsCategory) Then
			ViewColumnInfo(i) = Category		'Categorized column
		Elseif (view.Columns(i).IsResponse) Then
			ViewColumnInfo(i) = Response		'Show responses only column
		Else
			ViewColumnInfo(i) = Shown			'Normal column
		End If
		
		If ViewColumnInfo(i) <> Hidden Then 
			'Count visible columns (columns in destination spreadsheet)
			k = k + 1
			
			'Set Column Title	
			If ViewColumnInfo(i) = Shown Then
				Wsheet.Cells(1,k).Value = ViewColumns(i).Title
			Else
				Wsheet.Cells(1,k).Value= ""
			End If
			
			'Set Default Column Font, Style, Size, and Color
			Wsheet.Columns(k).Font.Name = "Arial"			
			Wsheet.Columns(k).Font.Size = 10
			Wsheet.Columns(k).Font.Bold = False			
			Wsheet.Columns(k).Font.Italic = False			
			Wsheet.Columns(k).Font.Underline = False			
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(0)
			
			'Set Custom Column Font Style
			iTemp = view.Columns(i).FontStyle
			If (iTemp And 1) = 1 Then Wsheet.Columns(k).Font.Bold = True
			If (iTemp And 2) = 2 Then Wsheet.Columns(k).Font.Italic = True		
			If (iTemp And 4) = 4 Then Wsheet.Columns(k).Font.Underline = True
			Wsheet.Columns(k).Font.Size = View.Columns(i).FontPointSize
			sTemp = View.Columns(i).FontFace
			If sTemp <> "Default Sans Serif" Then Wsheet.Columns(k).Font.Name = View.Columns(i).FontFace
			Wsheet.Columns(k).Font.Color = NotesToRGBColor(View.Columns(i).FontColor)			
		End If
	Next
	iTotalExcelColumns = k
	
	'Set header row style
	Wsheet.Rows(1).Font.Name = "Arial"
	Wsheet.Rows(1).Font.Color = NotesToRGBColor(1)
	Wsheet.Rows(1).Interior.Color = NotesToRGBColor(14)	
	Wsheet.Rows(1).Font.Bold = True
	Wsheet.Rows(1).Font.Size = 11
	
	'Export view entries/rows to spreadsheet
'	If Not ses.IsOnServer Then Print "Exporting data to Microsoft Excel spreadsheet..."		
	iStatusCounter = 1
	iCurRow = 2	
	Set ViewEntry = Nav.GetFirst 'Get the first item in the view
	While Not (ViewEntry Is Nothing)
		
		'Check number of columnvalues for current entry (may be less for catagorized columns)
		iTemp = Ubound(ViewEntry.ColumnValues)
		If iTemp < iTotalViewColumns Then 
			iUpperColumn = iTemp
		Else
			iUpperColumn = iTotalViewColumns
		End If
		
		iCurCol = 0
		For i = 0 To iUpperColumn
			If ViewColumnInfo(i) <> Hidden Then 'Only process visible columns				
				
				iCurCol = iCurCol + 1
				sColumnValue = ArrayToLines(ViewEntry.ColumnValues(i))				
				
				'Default Value
				Wsheet.Cells(iCurRow,iCurCol).Value=""				
				
				iTemp = ViewEntry.ColumnIndentLevel
				If (iTemp > 0) Then
					'Entry is a response document
					If ViewColumnInfo(i) = Response Then 'Only show response document entries in a 'response' column						
						sPadding = ""
						For k = 1 To iTemp
							sPadding = sPadding + "      "
						Next
						Wsheet.Cells(iCurRow,iCurCol).Value = sPadding + sColumnValue
					End If
				Elseif (ViewEntry.IsCategory) Then
					'Entry is a category
					If ViewColumnInfo(i) = Category Then 'Only show category entries in a 'catagory' column
						Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
					End If
				Else
					'Normal column
					If ViewColumnInfo(i) = Shown Then Wsheet.Cells(iCurRow,iCurCol).Value = sColumnValue
				End If
			End If										
		Next			
		
		iCurRow = iCurRow + 1
		
		iStatusCounter = iStatusCounter + 1
		If iStatusCounter = 10 Then
'			If Not ses.IsOnServer Then Print "Exporting data to Microsoft Excel spreadsheet... (" + Cstr(iCurRow-1) + " rows processed)"
			iStatusCounter = 0
		End If
		
		'Perform error handling here in case of nasty view errors like "not in index"
		Err = 0
		On Error Resume Next
		Set ViewEntry = Nav.GetNext(ViewEntry)
		If Err <> 0 Then 
			ReturnMsg = "Error selecting the next row in the view. We were at row " & iCurRow & " and the remaining rows will be ignored."
			Set ViewEntry = Nothing
		End If
		On Error Goto ErrorStuff
	Wend		
	
finish:
	On Error Goto FinishingError
	
	If ReturnMsg = "" Then ReturnMsg = "Microsoft Excel export complete (" + Cstr(iCurRow-1) + " rows processed in total)"	
	
	'Set column widths
	i = 0
	For k = 0 To iTotalViewColumns
		If ViewColumnInfo(k) <> Hidden Then
			i = i + 1
			If ViewColumnInfo(k) = Category Then
				Wsheet.Columns(i).ColumnWidth = 2
			Elseif ViewColumnInfo(k) = Response Then			
				Wsheet.Columns(i).ColumnWidth = 0.1			
			Else
				Wsheet.Columns(i).Autofit
			End If
		End If
	Next
	
	'Open Spreadsheet in UI if needed
'	If OpenInUI = True Then
'		ExcelApp.Visible = True
'	Else
	Wbook.SaveAs(file) 		
	Wbook.close 
	ExcelApp.Quit
'	End If
	
	'encourage quicker garbage cleanup
	Set Wsheet = Nothing
	Set Wbook = Nothing
	Set ExcelApp = Nothing
	
byebye:
	ViewToExcel3 = ReturnMsg	
	Exit Function
	
ErrorStuff:
	ReturnMsg = "Error " & Err & " while processing Excel Exporter at line " & Erl & ": " & Error
	Resume finish
	
FinishingError:
	ReturnMsg = "Error " & Err & " finishing Excel Exporter at line " & Erl & ": " & Error
	Resume byebye
	
End Function

'++LotusScript Development Environment:2:1:FixLineBreaks:1:8
Function FixLineBreaks(BadString As String) As String
	
	Dim i As Long
	Dim i2 As Long
	
	'Fix Mythical Nulls
	i = 1
	While i > 0 
		i = Instr(1,BadString,Chr(0))
		If i > 0 Then BadString = Left(BadString,i-1) + Chr(10) + Mid(BadString,i+1)
	Wend
	
	'Fix Bad CR's
	i = 1
	While i > 0 
		i = Instr(i,BadString,Chr(13))
		If i <> 0 Then
			If Mid(BadString,i+1,1) = Chr(10) Then
				BadString = Left(BadString,i-1) + Mid(BadString,i+1)				
			Else
				BadString = Left(BadString,i-1) + Chr(10) + Mid(BadString,i+1)
			End If
			i = i + 1
		End If
	Wend
	
	
	If Instr(BadString,"-")=1 Or Instr(BadString,"=")=1 Then
		BadString = {"} & BadString & {"}
	End If
	
	FixLineBreaks = BadString
	
End Function